/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SDTemplateGetTokensResponse_player.h
 *
 * 
 */

#ifndef GG_STARDUST_CORESDK_MODEL_SDTemplateGetTokensResponse_player_H_
#define GG_STARDUST_CORESDK_MODEL_SDTemplateGetTokensResponse_player_H_


#include "StardustCoreSDK/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {


/// <summary>
/// 
/// </summary>
class  SDTemplateGetTokensResponse_player
    : public ModelBase
{
public:
    SDTemplateGetTokensResponse_player();
    virtual ~SDTemplateGetTokensResponse_player();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SDTemplateGetTokensResponse_player members

    /// <summary>
    /// Player ID in the form of a UUID
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Player ID in the form of a the game owner&#39;s internal playerId, i.e. email address
    /// </summary>
    utility::string_t getUniqueId() const;
    bool uniqueIdIsSet() const;
    void unsetUniqueId();

    void setUniqueId(const utility::string_t& value);

    /// <summary>
    /// URL of image cached by Stardust
    /// </summary>
    utility::string_t getImage() const;
    bool imageIsSet() const;
    void unsetImage();

    void setImage(const utility::string_t& value);

    /// <summary>
    /// Timestamp of when a player was deleted
    /// </summary>
    utility::string_t getDeletedAt() const;
    bool deletedAtIsSet() const;
    void unsetDeletedAt();

    void setDeletedAt(const utility::string_t& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_UniqueId;
    bool m_UniqueIdIsSet;
    utility::string_t m_Image;
    bool m_ImageIsSet;
    utility::string_t m_DeletedAt;
    bool m_DeletedAtIsSet;
};


}
}
}
}

#endif /* GG_STARDUST_CORESDK_MODEL_SDTemplateGetTokensResponse_player_H_ */
