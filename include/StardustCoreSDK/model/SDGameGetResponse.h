/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-06-15T19:52:41Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SDGameGetResponse.h
 *
 * This is the data output json model
 */

#ifndef GG_STARDUST_CORESDK_MODEL_SDGameGetResponse_H_
#define GG_STARDUST_CORESDK_MODEL_SDGameGetResponse_H_


#include "StardustCoreSDK/ModelBase.h"

#include "StardustCoreSDK/Object.h"
#include "StardustCoreSDK/model/SDGameGetResponse_fees_inner.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {

class SDGameGetResponse_fees_inner;

/// <summary>
/// This is the data output json model
/// </summary>
class  SDGameGetResponse
    : public ModelBase
{
public:
    SDGameGetResponse();
    virtual ~SDGameGetResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SDGameGetResponse members

    /// <summary>
    /// Game ID Number (unsigned 32 bit integer)
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// Game Owner ID
    /// </summary>
    utility::string_t getOwnerId() const;
    bool ownerIdIsSet() const;
    void unsetOwnerId();

    void setOwnerId(const utility::string_t& value);

    /// <summary>
    /// Game name
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Game description
    /// </summary>
    utility::string_t getDesc() const;
    bool descIsSet() const;
    void unsetDesc();

    void setDesc(const utility::string_t& value);

    /// <summary>
    /// Game image
    /// </summary>
    utility::string_t getImage() const;
    bool imageIsSet() const;
    void unsetImage();

    void setImage(const utility::string_t& value);

    /// <summary>
    /// Game bucket name
    /// </summary>
    utility::string_t getBucketName() const;
    bool bucketNameIsSet() const;
    void unsetBucketName();

    void setBucketName(const utility::string_t& value);

    /// <summary>
    /// Game news
    /// </summary>
    utility::string_t getNews() const;
    bool newsIsSet() const;
    void unsetNews();

    void setNews(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<SDGameGetResponse_fees_inner>>& getFees();
    bool feesIsSet() const;
    void unsetFees();

    void setFees(const std::vector<std::shared_ptr<SDGameGetResponse_fees_inner>>& value);

    /// <summary>
    /// Game properties
    /// </summary>
    std::shared_ptr<Object> getProps() const;
    bool propsIsSet() const;
    void unsetProps();

    void setProps(const std::shared_ptr<Object>& value);

    /// <summary>
    /// If on test mode features are enabled. Currently in development.
    /// </summary>
    bool isTestMode() const;
    bool testModeIsSet() const;
    void unsetTestMode();

    void setTestMode(bool value);


protected:
    int32_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_OwnerId;
    bool m_OwnerIdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Desc;
    bool m_DescIsSet;
    utility::string_t m_Image;
    bool m_ImageIsSet;
    utility::string_t m_BucketName;
    bool m_BucketNameIsSet;
    utility::string_t m_News;
    bool m_NewsIsSet;
    std::vector<std::shared_ptr<SDGameGetResponse_fees_inner>> m_Fees;
    bool m_FeesIsSet;
    std::shared_ptr<Object> m_Props;
    bool m_PropsIsSet;
    bool m_TestMode;
    bool m_TestModeIsSet;
};


}
}
}
}

#endif /* GG_STARDUST_CORESDK_MODEL_SDGameGetResponse_H_ */
