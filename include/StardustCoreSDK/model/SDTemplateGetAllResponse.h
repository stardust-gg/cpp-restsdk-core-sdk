/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SDTemplateGetAllResponse.h
 *
 * 
 */

#ifndef GG_STARDUST_CORESDK_MODEL_SDTemplateGetAllResponse_H_
#define GG_STARDUST_CORESDK_MODEL_SDTemplateGetAllResponse_H_


#include "StardustCoreSDK/ModelBase.h"

#include "StardustCoreSDK/Object.h"
#include "StardustCoreSDK/model/SDTemplateGetAllResponse_props.h"
#include <cpprest/details/basic_types.h>

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {

class SDTemplateGetAllResponse_props;

/// <summary>
/// 
/// </summary>
class  SDTemplateGetAllResponse
    : public ModelBase
{
public:
    SDTemplateGetAllResponse();
    virtual ~SDTemplateGetAllResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SDTemplateGetAllResponse members

    /// <summary>
    /// Game ID Number (unsigned 32 bit integer)
    /// </summary>
    int32_t getGameId() const;
    bool gameIdIsSet() const;
    void unsetGameId();

    void setGameId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unset_id();

    void setId(int32_t value);

    /// <summary>
    /// u96 Number as String, min: 0, max: 39614081257132168796771975167
    /// </summary>
    utility::string_t getCap() const;
    bool capIsSet() const;
    void unsetCap();

    void setCap(const utility::string_t& value);

    /// <summary>
    /// The type of custom contract bieng used for this template.
    /// </summary>
    utility::string_t getContractType() const;
    bool contractTypeIsSet() const;
    void unsetContractType();

    void setContractType(const utility::string_t& value);

    /// <summary>
    /// u96 Number as String, min: 0, max: 39614081257132168796771975167
    /// </summary>
    utility::string_t getTotalSupply() const;
    bool totalSupplyIsSet() const;
    void unsetTotalSupply();

    void setTotalSupply(const utility::string_t& value);

    /// <summary>
    /// The name of the template
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SDTemplateGetAllResponse_props> getProps() const;
    bool propsIsSet() const;
    void unsetProps();

    void setProps(const std::shared_ptr<SDTemplateGetAllResponse_props>& value);

    /// <summary>
    /// Returned to marketplaces as contract metadata
    /// </summary>
    std::shared_ptr<Object> getPublicContractMetadata() const;
    bool publicContractMetadataIsSet() const;
    void unsetPublicContractMetadata();

    void setPublicContractMetadata(const std::shared_ptr<Object>& value);

    /// <summary>
    /// Inherited by tokens, and returned to marketplaces as token metadata
    /// </summary>
    std::shared_ptr<Object> getPublicTokenMetadata() const;
    bool publicTokenMetadataIsSet() const;
    void unsetPublicTokenMetadata();

    void setPublicTokenMetadata(const std::shared_ptr<Object>& value);

    /// <summary>
    /// Blockchain address for the contract associated with this tmeplate
    /// </summary>
    utility::string_t getBlockchainContractAddress() const;
    bool blockchainContractAddressIsSet() const;
    void unsetBlockchain_contract_address();

    void setBlockchainContractAddress(const utility::string_t& value);


protected:
    int32_t m_GameId;
    bool m_GameIdIsSet;
    int32_t m__id;
    bool m__idIsSet;
    utility::string_t m_Cap;
    bool m_CapIsSet;
    utility::string_t m_ContractType;
    bool m_ContractTypeIsSet;
    utility::string_t m_TotalSupply;
    bool m_TotalSupplyIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
    std::shared_ptr<SDTemplateGetAllResponse_props> m_Props;
    bool m_PropsIsSet;
    std::shared_ptr<Object> m_PublicContractMetadata;
    bool m_PublicContractMetadataIsSet;
    std::shared_ptr<Object> m_PublicTokenMetadata;
    bool m_PublicTokenMetadataIsSet;
    utility::string_t m_Blockchain_contract_address;
    bool m_Blockchain_contract_addressIsSet;
};


}
}
}
}

#endif /* GG_STARDUST_CORESDK_MODEL_SDTemplateGetAllResponse_H_ */
