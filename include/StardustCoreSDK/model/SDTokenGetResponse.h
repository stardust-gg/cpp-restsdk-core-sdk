/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SDTokenGetResponse.h
 *
 * token data
 */

#ifndef GG_STARDUST_CORESDK_MODEL_SDTokenGetResponse_H_
#define GG_STARDUST_CORESDK_MODEL_SDTokenGetResponse_H_


#include "StardustCoreSDK/ModelBase.h"

#include "StardustCoreSDK/Object.h"
#include "StardustCoreSDK/model/SDPlayerGetInventoryResponse_props.h"
#include <cpprest/details/basic_types.h>

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {

class SDPlayerGetInventoryResponse_props;

/// <summary>
/// token data
/// </summary>
class  SDTokenGetResponse
    : public ModelBase
{
public:
    SDTokenGetResponse();
    virtual ~SDTokenGetResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SDTokenGetResponse members

    /// <summary>
    /// Game ID Number (unsigned 32 bit integer)
    /// </summary>
    int32_t getGameId() const;
    bool gameIdIsSet() const;
    void unsetGameId();

    void setGameId(int32_t value);

    /// <summary>
    /// Template ID Number (unsigned 32 bit integer)
    /// </summary>
    int32_t getTemplateId() const;
    bool templateIdIsSet() const;
    void unsetTemplateId();

    void setTemplateId(int32_t value);

    /// <summary>
    /// The ID of the token created
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// The name of the template
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getFlags() const;
    bool flagsIsSet() const;
    void unsetFlags();

    void setFlags(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SDPlayerGetInventoryResponse_props> getProps() const;
    bool propsIsSet() const;
    void unsetProps();

    void setProps(const std::shared_ptr<SDPlayerGetInventoryResponse_props>& value);

    /// <summary>
    /// Game Owner&#39;s Public Key
    /// </summary>
    utility::string_t getOwner() const;
    bool ownerIsSet() const;
    void unsetOwner();

    void setOwner(const utility::string_t& value);

    /// <summary>
    /// Returned to marketplaces as token metadata
    /// </summary>
    std::shared_ptr<Object> getPublicMetadata() const;
    bool publicMetadataIsSet() const;
    void unsetPublicMetadata();

    void setPublicMetadata(const std::shared_ptr<Object>& value);

    /// <summary>
    /// Blockchain ID for the token
    /// </summary>
    utility::string_t getBlockchainTokenId() const;
    bool blockchainTokenIdIsSet() const;
    void unsetBlockchainTokenId();

    void setBlockchainTokenId(const utility::string_t& value);

    /// <summary>
    /// Link to view token on blockchain explorer (ex. polygonscan)
    /// </summary>
    utility::string_t getBlockchainExplorerLink() const;
    bool blockchainExplorerLinkIsSet() const;
    void unsetBlockchainExplorerLink();

    void setBlockchainExplorerLink(const utility::string_t& value);


protected:
    int32_t m_GameId;
    bool m_GameIdIsSet;
    int32_t m_TemplateId;
    bool m_TemplateIdIsSet;
    int32_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    int32_t m_Flags;
    bool m_FlagsIsSet;
    std::shared_ptr<SDPlayerGetInventoryResponse_props> m_Props;
    bool m_PropsIsSet;
    utility::string_t m_Owner;
    bool m_OwnerIsSet;
    std::shared_ptr<Object> m_PublicMetadata;
    bool m_PublicMetadataIsSet;
    utility::string_t m_BlockchainTokenId;
    bool m_BlockchainTokenIdIsSet;
    utility::string_t m_BlockchainExplorerLink;
    bool m_BlockchainExplorerLinkIsSet;
};


}
}
}
}

#endif /* GG_STARDUST_CORESDK_MODEL_SDTokenGetResponse_H_ */
