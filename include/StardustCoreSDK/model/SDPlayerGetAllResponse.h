/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SDPlayerGetAllResponse.h
 *
 * This is the data output json model
 */

#ifndef GG_STARDUST_CORESDK_MODEL_SDPlayerGetAllResponse_H_
#define GG_STARDUST_CORESDK_MODEL_SDPlayerGetAllResponse_H_


#include "StardustCoreSDK/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {


/// <summary>
/// This is the data output json model
/// </summary>
class  SDPlayerGetAllResponse
    : public ModelBase
{
public:
    SDPlayerGetAllResponse();
    virtual ~SDPlayerGetAllResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SDPlayerGetAllResponse members

    /// <summary>
    /// Player ID in the form of a UUID
    /// </summary>
    utility::string_t getPlayerId() const;
    bool playerIdIsSet() const;
    void unsetPlayerId();

    void setPlayerId(const utility::string_t& value);

    /// <summary>
    /// Game player&#39;s unique ID from the game itself
    /// </summary>
    utility::string_t getUniqueId() const;
    bool uniqueIdIsSet() const;
    void unsetUniqueId();

    void setUniqueId(const utility::string_t& value);

    /// <summary>
    /// Game player&#39;s ID in the database
    /// </summary>
    double getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(double value);

    /// <summary>
    /// Date and time the player was &#39;last seen&#39; actively participating in the game
    /// </summary>
    utility::string_t getLastSeen() const;
    bool lastSeenIsSet() const;
    void unsetLastSeen();

    void setLastSeen(const utility::string_t& value);

    /// <summary>
    /// URL of image cached by Stardust
    /// </summary>
    utility::string_t getImage() const;
    bool imageIsSet() const;
    void unsetImage();

    void setImage(const utility::string_t& value);


protected:
    utility::string_t m_PlayerId;
    bool m_PlayerIdIsSet;
    utility::string_t m_UniqueId;
    bool m_UniqueIdIsSet;
    double m_Id;
    bool m_IdIsSet;
    utility::string_t m_LastSeen;
    bool m_LastSeenIsSet;
    utility::string_t m_Image;
    bool m_ImageIsSet;
};


}
}
}
}

#endif /* GG_STARDUST_CORESDK_MODEL_SDPlayerGetAllResponse_H_ */
