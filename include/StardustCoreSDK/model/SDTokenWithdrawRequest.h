/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SDTokenWithdrawRequest.h
 *
 * 
 */

#ifndef GG_STARDUST_CORESDK_MODEL_SDTokenWithdrawRequest_H_
#define GG_STARDUST_CORESDK_MODEL_SDTokenWithdrawRequest_H_


#include "StardustCoreSDK/ModelBase.h"

#include "StardustCoreSDK/model/SDTokenWithdrawObject.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {

class SDTokenWithdrawObject;

/// <summary>
/// 
/// </summary>
class  SDTokenWithdrawRequest
    : public ModelBase
{
public:
    SDTokenWithdrawRequest();
    virtual ~SDTokenWithdrawRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SDTokenWithdrawRequest members

    /// <summary>
    /// External (non-custodial) blockchain wallet address
    /// </summary>
    utility::string_t getAddress() const;
    bool addressIsSet() const;
    void unsetAddress();

    void setAddress(const utility::string_t& value);

    /// <summary>
    /// The Player&#39;s id, can be found with Player/getId(s) in uuid format. Also returned from player/create (ex. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX)
    /// </summary>
    utility::string_t getPlayerId() const;
    bool playerIdIsSet() const;
    void unsetPlayerId();

    void setPlayerId(const utility::string_t& value);

    /// <summary>
    /// Array of Token objects
    /// </summary>
    std::vector<std::shared_ptr<SDTokenWithdrawObject>>& getTokenObjects();
    bool tokenObjectsIsSet() const;
    void unsetTokenObjects();

    void setTokenObjects(const std::vector<std::shared_ptr<SDTokenWithdrawObject>>& value);


protected:
    utility::string_t m_Address;
    bool m_AddressIsSet;
    utility::string_t m_PlayerId;
    bool m_PlayerIdIsSet;
    std::vector<std::shared_ptr<SDTokenWithdrawObject>> m_TokenObjects;
    bool m_TokenObjectsIsSet;
};


}
}
}
}

#endif /* GG_STARDUST_CORESDK_MODEL_SDTokenWithdrawRequest_H_ */
