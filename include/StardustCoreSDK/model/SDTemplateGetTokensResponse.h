/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-06-15T19:52:41Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SDTemplateGetTokensResponse.h
 *
 * Token data
 */

#ifndef GG_STARDUST_CORESDK_MODEL_SDTemplateGetTokensResponse_H_
#define GG_STARDUST_CORESDK_MODEL_SDTemplateGetTokensResponse_H_


#include "StardustCoreSDK/ModelBase.h"

#include "StardustCoreSDK/model/SDTemplateGetTokensResponse_player.h"
#include "StardustCoreSDK/model/SDTemplateGetTokensResponse_token.h"

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {

class SDTemplateGetTokensResponse_token;
class SDTemplateGetTokensResponse_player;

/// <summary>
/// Token data
/// </summary>
class  SDTemplateGetTokensResponse
    : public ModelBase
{
public:
    SDTemplateGetTokensResponse();
    virtual ~SDTemplateGetTokensResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SDTemplateGetTokensResponse members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SDTemplateGetTokensResponse_token> getToken() const;
    bool tokenIsSet() const;
    void unsetToken();

    void setToken(const std::shared_ptr<SDTemplateGetTokensResponse_token>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SDTemplateGetTokensResponse_player> getPlayer() const;
    bool playerIsSet() const;
    void unsetPlayer();

    void setPlayer(const std::shared_ptr<SDTemplateGetTokensResponse_player>& value);


protected:
    std::shared_ptr<SDTemplateGetTokensResponse_token> m_Token;
    bool m_TokenIsSet;
    std::shared_ptr<SDTemplateGetTokensResponse_player> m_Player;
    bool m_PlayerIsSet;
};


}
}
}
}

#endif /* GG_STARDUST_CORESDK_MODEL_SDTemplateGetTokensResponse_H_ */
