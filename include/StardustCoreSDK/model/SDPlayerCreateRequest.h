/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SDPlayerCreateRequest.h
 *
 * 
 */

#ifndef GG_STARDUST_CORESDK_MODEL_SDPlayerCreateRequest_H_
#define GG_STARDUST_CORESDK_MODEL_SDPlayerCreateRequest_H_


#include "StardustCoreSDK/ModelBase.h"

#include "StardustCoreSDK/Object.h"
#include <cpprest/details/basic_types.h>

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {


/// <summary>
/// 
/// </summary>
class  SDPlayerCreateRequest
    : public ModelBase
{
public:
    SDPlayerCreateRequest();
    virtual ~SDPlayerCreateRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SDPlayerCreateRequest members

    /// <summary>
    /// Identifier for the player
    /// </summary>
    utility::string_t getUniqueId() const;
    bool uniqueIdIsSet() const;
    void unsetUniqueId();

    void setUniqueId(const utility::string_t& value);

    /// <summary>
    /// URL of the player&#39;s image
    /// </summary>
    utility::string_t getImage() const;
    bool imageIsSet() const;
    void unsetImage();

    void setImage(const utility::string_t& value);

    /// <summary>
    /// Metadata about the player
    /// </summary>
    std::shared_ptr<Object> getUserData() const;
    bool userDataIsSet() const;
    void unsetUserData();

    void setUserData(const std::shared_ptr<Object>& value);


protected:
    utility::string_t m_UniqueId;
    bool m_UniqueIdIsSet;
    utility::string_t m_Image;
    bool m_ImageIsSet;
    std::shared_ptr<Object> m_UserData;
    bool m_UserDataIsSet;
};


}
}
}
}

#endif /* GG_STARDUST_CORESDK_MODEL_SDPlayerCreateRequest_H_ */
