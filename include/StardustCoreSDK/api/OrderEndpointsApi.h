/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-06-15T19:52:41Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderEndpointsApi.h
 *
 * 
 */

#ifndef GG_STARDUST_CORESDK_OrderEndpointsApi_H_
#define GG_STARDUST_CORESDK_OrderEndpointsApi_H_



#include "StardustCoreSDK/ApiClient.h"

#include "StardustCoreSDK/model/Error.h"
#include "StardustCoreSDK/Object.h"
#include "StardustCoreSDK/model/SDOrderBuyRequest.h"
#include "StardustCoreSDK/model/SDOrderCreateRequest.h"
#include "StardustCoreSDK/model/SDOrderCreateResponse.h"
#include "StardustCoreSDK/model/SDOrderGetAllResponse.h"
#include "StardustCoreSDK/model/SDOrderGetResponse.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace gg {
namespace stardust {
namespace coresdk {

using namespace gg::stardust::coresdk::model;

class  IOrderEndpointsApi
{
public:
    IOrderEndpointsApi() = default;
    virtual ~IOrderEndpointsApi() = default;

    virtual pplx::task<std::shared_ptr<Object>> orderBuyPost(
        std::shared_ptr<SDOrderBuyRequest> sDOrderBuyRequest
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Object>> orderCancelDelete(
        utility::string_t orderId
    ) const = 0;
    virtual pplx::task<std::shared_ptr<SDOrderCreateResponse>> orderCreatePost(
        std::shared_ptr<SDOrderCreateRequest> sDOrderCreateRequest
    ) const = 0;
    virtual pplx::task<std::vector<std::shared_ptr<SDOrderGetAllResponse>>> orderGetAllGet(
        utility::string_t start,
        utility::string_t limit,
        boost::optional<utility::string_t> playerId,
        boost::optional<utility::string_t> status
    ) const = 0;
    virtual pplx::task<std::shared_ptr<SDOrderGetResponse>> orderGetGet(
        utility::string_t orderId
    ) const = 0;
};

class  OrderEndpointsApi  : public IOrderEndpointsApi 
{
public:
    using Base = IOrderEndpointsApi;

    explicit OrderEndpointsApi( std::shared_ptr<const ApiClient> apiClient );

    ~OrderEndpointsApi() override;

    /// <summary>
    /// Buy Order
    /// </summary>
    /// <remarks>
    /// Buy a Order
    /// </remarks>
    /// <param name="sDOrderBuyRequest"></param>
    pplx::task<std::shared_ptr<Object>> orderBuyPost(
        std::shared_ptr<SDOrderBuyRequest> sDOrderBuyRequest
    ) const override;
    /// <summary>
    /// Cancel Order
    /// </summary>
    /// <remarks>
    /// Cancels a Order
    /// </remarks>
    /// <param name="orderId">Order Id unsigned 32 bit integer</param>
    pplx::task<std::shared_ptr<Object>> orderCancelDelete(
        utility::string_t orderId
    ) const override;
    /// <summary>
    /// Create Order
    /// </summary>
    /// <remarks>
    /// Adds a New Order
    /// </remarks>
    /// <param name="sDOrderCreateRequest"></param>
    pplx::task<std::shared_ptr<SDOrderCreateResponse>> orderCreatePost(
        std::shared_ptr<SDOrderCreateRequest> sDOrderCreateRequest
    ) const override;
    /// <summary>
    /// Get All Orders
    /// </summary>
    /// <remarks>
    /// Get the List of Game Orders
    /// </remarks>
    /// <param name="start">position in list</param>
    /// <param name="limit">maximum templates returned in list</param>
    /// <param name="playerId">A Games PlayerId to filter by player (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="status">State of the order to filter. Default is offer. (&#39;offer&#39;, &#39;accepted&#39;, &#39;cancelled&#39;) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<SDOrderGetAllResponse>>> orderGetAllGet(
        utility::string_t start,
        utility::string_t limit,
        boost::optional<utility::string_t> playerId,
        boost::optional<utility::string_t> status
    ) const override;
    /// <summary>
    /// Get Order
    /// </summary>
    /// <remarks>
    /// Get a Game Order
    /// </remarks>
    /// <param name="orderId">An Order ID</param>
    pplx::task<std::shared_ptr<SDOrderGetResponse>> orderGetGet(
        utility::string_t orderId
    ) const override;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}

#endif /* GG_STARDUST_CORESDK_OrderEndpointsApi_H_ */

