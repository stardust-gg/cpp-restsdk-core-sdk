/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-06-15T19:52:41Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TemplateEndpointsApi.h
 *
 * 
 */

#ifndef GG_STARDUST_CORESDK_TemplateEndpointsApi_H_
#define GG_STARDUST_CORESDK_TemplateEndpointsApi_H_



#include "StardustCoreSDK/ApiClient.h"

#include "StardustCoreSDK/model/Error.h"
#include "StardustCoreSDK/Object.h"
#include "StardustCoreSDK/model/SDTemplateCountResponse.h"
#include "StardustCoreSDK/model/SDTemplateCreateRequest.h"
#include "StardustCoreSDK/model/SDTemplateCreateResponse.h"
#include "StardustCoreSDK/model/SDTemplateGetAllResponse.h"
#include "StardustCoreSDK/model/SDTemplateGetResponse.h"
#include "StardustCoreSDK/model/SDTemplateGetTokensResponse.h"
#include "StardustCoreSDK/model/SDTemplateMutateRequest.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace gg {
namespace stardust {
namespace coresdk {

using namespace gg::stardust::coresdk::model;

class  ITemplateEndpointsApi
{
public:
    ITemplateEndpointsApi() = default;
    virtual ~ITemplateEndpointsApi() = default;

    virtual pplx::task<std::shared_ptr<SDTemplateCountResponse>> templateCountGet(
        boost::optional<utility::string_t> filter
    ) const = 0;
    virtual pplx::task<std::shared_ptr<SDTemplateCreateResponse>> templateCreatePost(
        std::shared_ptr<SDTemplateCreateRequest> sDTemplateCreateRequest
    ) const = 0;
    virtual pplx::task<std::vector<std::shared_ptr<SDTemplateGetAllResponse>>> templateGetAllGet(
        utility::string_t start,
        utility::string_t limit,
        boost::optional<utility::string_t> contractAddresses,
        boost::optional<utility::string_t> filter
    ) const = 0;
    virtual pplx::task<std::shared_ptr<SDTemplateGetResponse>> templateGetGet(
        utility::string_t templateId
    ) const = 0;
    virtual pplx::task<std::vector<std::shared_ptr<SDTemplateGetTokensResponse>>> templateGetTokensGet(
        utility::string_t templateId,
        boost::optional<utility::string_t> start,
        boost::optional<utility::string_t> limit,
        boost::optional<utility::string_t> includeDeleted
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Object>> templateMutatePut(
        std::shared_ptr<SDTemplateMutateRequest> sDTemplateMutateRequest
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Object>> templatePropsRemoveDelete(
        utility::string_t templateId,
        utility::string_t props
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Object>> templateRemoveDelete(
        utility::string_t templateId
    ) const = 0;
};

class  TemplateEndpointsApi  : public ITemplateEndpointsApi 
{
public:
    using Base = ITemplateEndpointsApi;

    explicit TemplateEndpointsApi( std::shared_ptr<const ApiClient> apiClient );

    ~TemplateEndpointsApi() override;

    /// <summary>
    /// Get Template Count
    /// </summary>
    /// <remarks>
    /// Get a Template&#39;s Count Within a Game
    /// </remarks>
    /// <param name="filter">Find a substring within the Template name field (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<SDTemplateCountResponse>> templateCountGet(
        boost::optional<utility::string_t> filter
    ) const override;
    /// <summary>
    /// Create Template
    /// </summary>
    /// <remarks>
    /// Adds a New Token Template that lets Players Acquire that Token using the Token/Mint Endpoint
    /// </remarks>
    /// <param name="sDTemplateCreateRequest"></param>
    pplx::task<std::shared_ptr<SDTemplateCreateResponse>> templateCreatePost(
        std::shared_ptr<SDTemplateCreateRequest> sDTemplateCreateRequest
    ) const override;
    /// <summary>
    /// Get All Templates
    /// </summary>
    /// <remarks>
    /// Get All of the Templates Within a Game
    /// </remarks>
    /// <param name="start">position in list</param>
    /// <param name="limit">maximum templates returned in list</param>
    /// <param name="contractAddresses">Stringify Array of blockchain contract addresses (ex. &#39;[\&quot;0x322\&quot;, \&quot;0xabc\&quot;]&#39;) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="filter">Find a substring within the Template name field (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<SDTemplateGetAllResponse>>> templateGetAllGet(
        utility::string_t start,
        utility::string_t limit,
        boost::optional<utility::string_t> contractAddresses,
        boost::optional<utility::string_t> filter
    ) const override;
    /// <summary>
    /// Get Template
    /// </summary>
    /// <remarks>
    /// Get the Details of a Template
    /// </remarks>
    /// <param name="templateId">Template Id such as 3589)</param>
    pplx::task<std::shared_ptr<SDTemplateGetResponse>> templateGetGet(
        utility::string_t templateId
    ) const override;
    /// <summary>
    /// Get Template Tokens
    /// </summary>
    /// <remarks>
    /// Get a List of All Minted Tokens from a Given Template
    /// </remarks>
    /// <param name="templateId">The ID of the Template</param>
    /// <param name="start">position in list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">maximum templates returned in list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="includeDeleted">If true tokens from deleted players are included in the response (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<SDTemplateGetTokensResponse>>> templateGetTokensGet(
        utility::string_t templateId,
        boost::optional<utility::string_t> start,
        boost::optional<utility::string_t> limit,
        boost::optional<utility::string_t> includeDeleted
    ) const override;
    /// <summary>
    /// Mutate Template
    /// </summary>
    /// <remarks>
    /// Mutates a Property of a Template, Which in Turn will Affect the Inherited Property on All of the Tokens Created from this Template (via token/mint)
    /// </remarks>
    /// <param name="sDTemplateMutateRequest"></param>
    pplx::task<std::shared_ptr<Object>> templateMutatePut(
        std::shared_ptr<SDTemplateMutateRequest> sDTemplateMutateRequest
    ) const override;
    /// <summary>
    /// Remove Template Property
    /// </summary>
    /// <remarks>
    /// Removes a Templates Property from Your Game
    /// </remarks>
    /// <param name="templateId">Template Id returned from template/create (ex. 5)</param>
    /// <param name="props">Stringify Array of template mutable property names ex: &#39;[\&quot;exp\&quot;, \&quot;health\&quot;]&#39; }</param>
    pplx::task<std::shared_ptr<Object>> templatePropsRemoveDelete(
        utility::string_t templateId,
        utility::string_t props
    ) const override;
    /// <summary>
    /// Remove Template
    /// </summary>
    /// <remarks>
    /// Removes a Template from Your Game. If Players have Instances of this Template from the token/mint Command, Their Tokens will NOT be Removed
    /// </remarks>
    /// <param name="templateId">Template Id returned from template/create (ex. 5)</param>
    pplx::task<std::shared_ptr<Object>> templateRemoveDelete(
        utility::string_t templateId
    ) const override;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}

#endif /* GG_STARDUST_CORESDK_TemplateEndpointsApi_H_ */

