/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-06-15T19:52:41Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef GG_STARDUST_CORESDK_TemplateEndpointsApiGMock_H_
#define GG_STARDUST_CORESDK_TemplateEndpointsApiGMock_H_

#include <gmock/gmock.h>

#include "TemplateEndpointsApi.h"

namespace gg {
namespace stardust {
namespace coresdk {

using namespace gg::stardust::coresdk::model;


class  TemplateEndpointsApiMock : public ITemplateEndpointsApi
{
public:
    using Base = ITemplateEndpointsApi;

    TemplateEndpointsApiMock() = default;
    explicit TemplateEndpointsApiMock( std::shared_ptr<ApiClient> apiClient ) { };
    ~TemplateEndpointsApiMock() override = default;

    MOCK_METHOD1( templateCountGet, pplx::task<std::shared_ptr<SDTemplateCountResponse>> (
        boost::optional<utility::string_t> filter
    ) );
    MOCK_METHOD1( templateCreatePost, pplx::task<std::shared_ptr<SDTemplateCreateResponse>> (
        std::shared_ptr<SDTemplateCreateRequest> sDTemplateCreateRequest
    ) );
    MOCK_METHOD4( templateGetAllGet, pplx::task<std::vector<std::shared_ptr<SDTemplateGetAllResponse>>> (
        utility::string_t start,
        utility::string_t limit,
        boost::optional<utility::string_t> contractAddresses,
        boost::optional<utility::string_t> filter
    ) );
    MOCK_METHOD1( templateGetGet, pplx::task<std::shared_ptr<SDTemplateGetResponse>> (
        utility::string_t templateId
    ) );
    MOCK_METHOD4( templateGetTokensGet, pplx::task<std::vector<std::shared_ptr<SDTemplateGetTokensResponse>>> (
        utility::string_t templateId,
        boost::optional<utility::string_t> start,
        boost::optional<utility::string_t> limit,
        boost::optional<utility::string_t> includeDeleted
    ) );
    MOCK_METHOD1( templateMutatePut, pplx::task<std::shared_ptr<Object>> (
        std::shared_ptr<SDTemplateMutateRequest> sDTemplateMutateRequest
    ) );
    MOCK_METHOD2( templatePropsRemoveDelete, pplx::task<std::shared_ptr<Object>> (
        utility::string_t templateId,
        utility::string_t props
    ) );
    MOCK_METHOD1( templateRemoveDelete, pplx::task<std::shared_ptr<Object>> (
        utility::string_t templateId
    ) );
};

}
}
}

#endif /* GG_STARDUST_CORESDK_TemplateEndpointsApiGMock_H_ */

