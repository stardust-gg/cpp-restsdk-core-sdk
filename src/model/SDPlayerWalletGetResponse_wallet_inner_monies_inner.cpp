/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StardustCoreSDK/model/SDPlayerWalletGetResponse_wallet_inner_monies_inner.h"

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {



SDPlayerWalletGetResponse_wallet_inner_monies_inner::SDPlayerWalletGetResponse_wallet_inner_monies_inner()
{
    m_Amount = utility::conversions::to_string_t("");
    m_AmountIsSet = false;
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
}

SDPlayerWalletGetResponse_wallet_inner_monies_inner::~SDPlayerWalletGetResponse_wallet_inner_monies_inner()
{
}

void SDPlayerWalletGetResponse_wallet_inner_monies_inner::validate()
{
    // TODO: implement validation
}

web::json::value SDPlayerWalletGetResponse_wallet_inner_monies_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AmountIsSet)
    {
        val[utility::conversions::to_string_t(U("amount"))] = ModelBase::toJson(m_Amount);
    }
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t(U("currency"))] = ModelBase::toJson(m_Currency);
    }

    return val;
}

bool SDPlayerWalletGetResponse_wallet_inner_monies_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amount")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAmount);
            setAmount(refVal_setAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("currency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("currency")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCurrency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrency);
            setCurrency(refVal_setCurrency);
        }
    }
    return ok;
}

void SDPlayerWalletGetResponse_wallet_inner_monies_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amount")), m_Amount));
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("currency")), m_Currency));
    }
}

bool SDPlayerWalletGetResponse_wallet_inner_monies_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("amount"))))
    {
        utility::string_t refVal_setAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amount"))), refVal_setAmount );
        setAmount(refVal_setAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("currency"))))
    {
        utility::string_t refVal_setCurrency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("currency"))), refVal_setCurrency );
        setCurrency(refVal_setCurrency);
    }
    return ok;
}

utility::string_t SDPlayerWalletGetResponse_wallet_inner_monies_inner::getAmount() const
{
    return m_Amount;
}

void SDPlayerWalletGetResponse_wallet_inner_monies_inner::setAmount(const utility::string_t& value)
{
    m_Amount = value;
    m_AmountIsSet = true;
}

bool SDPlayerWalletGetResponse_wallet_inner_monies_inner::amountIsSet() const
{
    return m_AmountIsSet;
}

void SDPlayerWalletGetResponse_wallet_inner_monies_inner::unsetAmount()
{
    m_AmountIsSet = false;
}
utility::string_t SDPlayerWalletGetResponse_wallet_inner_monies_inner::getCurrency() const
{
    return m_Currency;
}

void SDPlayerWalletGetResponse_wallet_inner_monies_inner::setCurrency(const utility::string_t& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}

bool SDPlayerWalletGetResponse_wallet_inner_monies_inner::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void SDPlayerWalletGetResponse_wallet_inner_monies_inner::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
}
}
}
}


