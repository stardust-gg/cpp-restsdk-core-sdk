/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StardustCoreSDK/model/SDGameMutateRequest.h"

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {



SDGameMutateRequest::SDGameMutateRequest()
{
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_News = utility::conversions::to_string_t("");
    m_NewsIsSet = false;
    m_PropsIsSet = false;
    m_TestMode = false;
    m_TestModeIsSet = false;
}

SDGameMutateRequest::~SDGameMutateRequest()
{
}

void SDGameMutateRequest::validate()
{
    // TODO: implement validation
}

web::json::value SDGameMutateRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_NewsIsSet)
    {
        val[utility::conversions::to_string_t(U("news"))] = ModelBase::toJson(m_News);
    }
    if(m_PropsIsSet)
    {
        val[utility::conversions::to_string_t(U("props"))] = ModelBase::toJson(m_Props);
    }
    if(m_TestModeIsSet)
    {
        val[utility::conversions::to_string_t(U("testMode"))] = ModelBase::toJson(m_TestMode);
    }

    return val;
}

bool SDGameMutateRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("news"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("news")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNews;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNews);
            setNews(refVal_setNews);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("props"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("props")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setProps;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProps);
            setProps(refVal_setProps);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("testMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("testMode")));
        if(!fieldValue.is_null())
        {
            bool refVal_setTestMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTestMode);
            setTestMode(refVal_setTestMode);
        }
    }
    return ok;
}

void SDGameMutateRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_NewsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("news")), m_News));
    }
    if(m_PropsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("props")), m_Props));
    }
    if(m_TestModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("testMode")), m_TestMode));
    }
}

bool SDGameMutateRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("news"))))
    {
        utility::string_t refVal_setNews;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("news"))), refVal_setNews );
        setNews(refVal_setNews);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("props"))))
    {
        std::shared_ptr<Object> refVal_setProps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("props"))), refVal_setProps );
        setProps(refVal_setProps);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("testMode"))))
    {
        bool refVal_setTestMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("testMode"))), refVal_setTestMode );
        setTestMode(refVal_setTestMode);
    }
    return ok;
}

utility::string_t SDGameMutateRequest::getDescription() const
{
    return m_Description;
}

void SDGameMutateRequest::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool SDGameMutateRequest::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void SDGameMutateRequest::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t SDGameMutateRequest::getNews() const
{
    return m_News;
}

void SDGameMutateRequest::setNews(const utility::string_t& value)
{
    m_News = value;
    m_NewsIsSet = true;
}

bool SDGameMutateRequest::newsIsSet() const
{
    return m_NewsIsSet;
}

void SDGameMutateRequest::unsetNews()
{
    m_NewsIsSet = false;
}
std::shared_ptr<Object> SDGameMutateRequest::getProps() const
{
    return m_Props;
}

void SDGameMutateRequest::setProps(const std::shared_ptr<Object>& value)
{
    m_Props = value;
    m_PropsIsSet = true;
}

bool SDGameMutateRequest::propsIsSet() const
{
    return m_PropsIsSet;
}

void SDGameMutateRequest::unsetProps()
{
    m_PropsIsSet = false;
}
bool SDGameMutateRequest::isTestMode() const
{
    return m_TestMode;
}

void SDGameMutateRequest::setTestMode(bool value)
{
    m_TestMode = value;
    m_TestModeIsSet = true;
}

bool SDGameMutateRequest::testModeIsSet() const
{
    return m_TestModeIsSet;
}

void SDGameMutateRequest::unsetTestMode()
{
    m_TestModeIsSet = false;
}
}
}
}
}


