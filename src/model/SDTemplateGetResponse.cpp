/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-06-15T19:52:41Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StardustCoreSDK/model/SDTemplateGetResponse.h"

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {



SDTemplateGetResponse::SDTemplateGetResponse()
{
    m_GameId = 0;
    m_GameIdIsSet = false;
    m__id = 0;
    m__idIsSet = false;
    m_Cap = utility::conversions::to_string_t("");
    m_CapIsSet = false;
    m_ContractType = utility::conversions::to_string_t("");
    m_ContractTypeIsSet = false;
    m_TotalSupply = utility::conversions::to_string_t("");
    m_TotalSupplyIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_PropsIsSet = false;
    m_PublicContractMetadataIsSet = false;
    m_PublicTokenMetadataIsSet = false;
    m_FeesIsSet = false;
    m_Blockchain_contract_address = utility::conversions::to_string_t("");
    m_Blockchain_contract_addressIsSet = false;
}

SDTemplateGetResponse::~SDTemplateGetResponse()
{
}

void SDTemplateGetResponse::validate()
{
    // TODO: implement validation
}

web::json::value SDTemplateGetResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_GameIdIsSet)
    {
        val[utility::conversions::to_string_t(U("gameId"))] = ModelBase::toJson(m_GameId);
    }
    if(m__idIsSet)
    {
        val[utility::conversions::to_string_t(U("_id"))] = ModelBase::toJson(m__id);
    }
    if(m_CapIsSet)
    {
        val[utility::conversions::to_string_t(U("cap"))] = ModelBase::toJson(m_Cap);
    }
    if(m_ContractTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("contractType"))] = ModelBase::toJson(m_ContractType);
    }
    if(m_TotalSupplyIsSet)
    {
        val[utility::conversions::to_string_t(U("totalSupply"))] = ModelBase::toJson(m_TotalSupply);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_PropsIsSet)
    {
        val[utility::conversions::to_string_t(U("props"))] = ModelBase::toJson(m_Props);
    }
    if(m_PublicContractMetadataIsSet)
    {
        val[utility::conversions::to_string_t(U("publicContractMetadata"))] = ModelBase::toJson(m_PublicContractMetadata);
    }
    if(m_PublicTokenMetadataIsSet)
    {
        val[utility::conversions::to_string_t(U("publicTokenMetadata"))] = ModelBase::toJson(m_PublicTokenMetadata);
    }
    if(m_FeesIsSet)
    {
        val[utility::conversions::to_string_t(U("fees"))] = ModelBase::toJson(m_Fees);
    }
    if(m_Blockchain_contract_addressIsSet)
    {
        val[utility::conversions::to_string_t(U("blockchain_contract_address"))] = ModelBase::toJson(m_Blockchain_contract_address);
    }

    return val;
}

bool SDTemplateGetResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("gameId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gameId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setGameId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGameId);
            setGameId(refVal_setGameId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cap"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cap")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCap;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCap);
            setCap(refVal_setCap);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("contractType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("contractType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContractType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContractType);
            setContractType(refVal_setContractType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("totalSupply"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("totalSupply")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalSupply;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalSupply);
            setTotalSupply(refVal_setTotalSupply);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("props"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("props")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SDTemplateGetAllResponse_props> refVal_setProps;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProps);
            setProps(refVal_setProps);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("publicContractMetadata"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("publicContractMetadata")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setPublicContractMetadata;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPublicContractMetadata);
            setPublicContractMetadata(refVal_setPublicContractMetadata);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("publicTokenMetadata"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("publicTokenMetadata")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setPublicTokenMetadata;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPublicTokenMetadata);
            setPublicTokenMetadata(refVal_setPublicTokenMetadata);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fees"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fees")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SDGameGetResponse_fees_inner>> refVal_setFees;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFees);
            setFees(refVal_setFees);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("blockchain_contract_address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("blockchain_contract_address")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlockchainContractAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockchainContractAddress);
            setBlockchainContractAddress(refVal_setBlockchainContractAddress);
        }
    }
    return ok;
}

void SDTemplateGetResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_GameIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gameId")), m_GameId));
    }
    if(m__idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_id")), m__id));
    }
    if(m_CapIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cap")), m_Cap));
    }
    if(m_ContractTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("contractType")), m_ContractType));
    }
    if(m_TotalSupplyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("totalSupply")), m_TotalSupply));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_PropsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("props")), m_Props));
    }
    if(m_PublicContractMetadataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("publicContractMetadata")), m_PublicContractMetadata));
    }
    if(m_PublicTokenMetadataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("publicTokenMetadata")), m_PublicTokenMetadata));
    }
    if(m_FeesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fees")), m_Fees));
    }
    if(m_Blockchain_contract_addressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("blockchain_contract_address")), m_Blockchain_contract_address));
    }
}

bool SDTemplateGetResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("gameId"))))
    {
        int32_t refVal_setGameId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gameId"))), refVal_setGameId );
        setGameId(refVal_setGameId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("_id"))))
    {
        int32_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cap"))))
    {
        utility::string_t refVal_setCap;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cap"))), refVal_setCap );
        setCap(refVal_setCap);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("contractType"))))
    {
        utility::string_t refVal_setContractType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("contractType"))), refVal_setContractType );
        setContractType(refVal_setContractType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("totalSupply"))))
    {
        utility::string_t refVal_setTotalSupply;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("totalSupply"))), refVal_setTotalSupply );
        setTotalSupply(refVal_setTotalSupply);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("props"))))
    {
        std::shared_ptr<SDTemplateGetAllResponse_props> refVal_setProps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("props"))), refVal_setProps );
        setProps(refVal_setProps);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("publicContractMetadata"))))
    {
        std::shared_ptr<Object> refVal_setPublicContractMetadata;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("publicContractMetadata"))), refVal_setPublicContractMetadata );
        setPublicContractMetadata(refVal_setPublicContractMetadata);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("publicTokenMetadata"))))
    {
        std::shared_ptr<Object> refVal_setPublicTokenMetadata;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("publicTokenMetadata"))), refVal_setPublicTokenMetadata );
        setPublicTokenMetadata(refVal_setPublicTokenMetadata);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fees"))))
    {
        std::vector<std::shared_ptr<SDGameGetResponse_fees_inner>> refVal_setFees;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fees"))), refVal_setFees );
        setFees(refVal_setFees);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("blockchain_contract_address"))))
    {
        utility::string_t refVal_setBlockchainContractAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("blockchain_contract_address"))), refVal_setBlockchainContractAddress );
        setBlockchainContractAddress(refVal_setBlockchainContractAddress);
    }
    return ok;
}

int32_t SDTemplateGetResponse::getGameId() const
{
    return m_GameId;
}

void SDTemplateGetResponse::setGameId(int32_t value)
{
    m_GameId = value;
    m_GameIdIsSet = true;
}

bool SDTemplateGetResponse::gameIdIsSet() const
{
    return m_GameIdIsSet;
}

void SDTemplateGetResponse::unsetGameId()
{
    m_GameIdIsSet = false;
}
int32_t SDTemplateGetResponse::getId() const
{
    return m__id;
}

void SDTemplateGetResponse::setId(int32_t value)
{
    m__id = value;
    m__idIsSet = true;
}

bool SDTemplateGetResponse::idIsSet() const
{
    return m__idIsSet;
}

void SDTemplateGetResponse::unset_id()
{
    m__idIsSet = false;
}
utility::string_t SDTemplateGetResponse::getCap() const
{
    return m_Cap;
}

void SDTemplateGetResponse::setCap(const utility::string_t& value)
{
    m_Cap = value;
    m_CapIsSet = true;
}

bool SDTemplateGetResponse::capIsSet() const
{
    return m_CapIsSet;
}

void SDTemplateGetResponse::unsetCap()
{
    m_CapIsSet = false;
}
utility::string_t SDTemplateGetResponse::getContractType() const
{
    return m_ContractType;
}

void SDTemplateGetResponse::setContractType(const utility::string_t& value)
{
    m_ContractType = value;
    m_ContractTypeIsSet = true;
}

bool SDTemplateGetResponse::contractTypeIsSet() const
{
    return m_ContractTypeIsSet;
}

void SDTemplateGetResponse::unsetContractType()
{
    m_ContractTypeIsSet = false;
}
utility::string_t SDTemplateGetResponse::getTotalSupply() const
{
    return m_TotalSupply;
}

void SDTemplateGetResponse::setTotalSupply(const utility::string_t& value)
{
    m_TotalSupply = value;
    m_TotalSupplyIsSet = true;
}

bool SDTemplateGetResponse::totalSupplyIsSet() const
{
    return m_TotalSupplyIsSet;
}

void SDTemplateGetResponse::unsetTotalSupply()
{
    m_TotalSupplyIsSet = false;
}
utility::string_t SDTemplateGetResponse::getName() const
{
    return m_Name;
}

void SDTemplateGetResponse::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool SDTemplateGetResponse::nameIsSet() const
{
    return m_NameIsSet;
}

void SDTemplateGetResponse::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t SDTemplateGetResponse::getType() const
{
    return m_Type;
}

void SDTemplateGetResponse::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool SDTemplateGetResponse::typeIsSet() const
{
    return m_TypeIsSet;
}

void SDTemplateGetResponse::unsetType()
{
    m_TypeIsSet = false;
}
std::shared_ptr<SDTemplateGetAllResponse_props> SDTemplateGetResponse::getProps() const
{
    return m_Props;
}

void SDTemplateGetResponse::setProps(const std::shared_ptr<SDTemplateGetAllResponse_props>& value)
{
    m_Props = value;
    m_PropsIsSet = true;
}

bool SDTemplateGetResponse::propsIsSet() const
{
    return m_PropsIsSet;
}

void SDTemplateGetResponse::unsetProps()
{
    m_PropsIsSet = false;
}
std::shared_ptr<Object> SDTemplateGetResponse::getPublicContractMetadata() const
{
    return m_PublicContractMetadata;
}

void SDTemplateGetResponse::setPublicContractMetadata(const std::shared_ptr<Object>& value)
{
    m_PublicContractMetadata = value;
    m_PublicContractMetadataIsSet = true;
}

bool SDTemplateGetResponse::publicContractMetadataIsSet() const
{
    return m_PublicContractMetadataIsSet;
}

void SDTemplateGetResponse::unsetPublicContractMetadata()
{
    m_PublicContractMetadataIsSet = false;
}
std::shared_ptr<Object> SDTemplateGetResponse::getPublicTokenMetadata() const
{
    return m_PublicTokenMetadata;
}

void SDTemplateGetResponse::setPublicTokenMetadata(const std::shared_ptr<Object>& value)
{
    m_PublicTokenMetadata = value;
    m_PublicTokenMetadataIsSet = true;
}

bool SDTemplateGetResponse::publicTokenMetadataIsSet() const
{
    return m_PublicTokenMetadataIsSet;
}

void SDTemplateGetResponse::unsetPublicTokenMetadata()
{
    m_PublicTokenMetadataIsSet = false;
}
std::vector<std::shared_ptr<SDGameGetResponse_fees_inner>>& SDTemplateGetResponse::getFees()
{
    return m_Fees;
}

void SDTemplateGetResponse::setFees(const std::vector<std::shared_ptr<SDGameGetResponse_fees_inner>>& value)
{
    m_Fees = value;
    m_FeesIsSet = true;
}

bool SDTemplateGetResponse::feesIsSet() const
{
    return m_FeesIsSet;
}

void SDTemplateGetResponse::unsetFees()
{
    m_FeesIsSet = false;
}
utility::string_t SDTemplateGetResponse::getBlockchainContractAddress() const
{
    return m_Blockchain_contract_address;
}

void SDTemplateGetResponse::setBlockchainContractAddress(const utility::string_t& value)
{
    m_Blockchain_contract_address = value;
    m_Blockchain_contract_addressIsSet = true;
}

bool SDTemplateGetResponse::blockchainContractAddressIsSet() const
{
    return m_Blockchain_contract_addressIsSet;
}

void SDTemplateGetResponse::unsetBlockchain_contract_address()
{
    m_Blockchain_contract_addressIsSet = false;
}
}
}
}
}


