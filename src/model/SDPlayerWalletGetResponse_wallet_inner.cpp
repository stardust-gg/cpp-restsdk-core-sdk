/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StardustCoreSDK/model/SDPlayerWalletGetResponse_wallet_inner.h"

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {



SDPlayerWalletGetResponse_wallet_inner::SDPlayerWalletGetResponse_wallet_inner()
{
    m_Blockchain = utility::conversions::to_string_t("");
    m_BlockchainIsSet = false;
    m_Address = utility::conversions::to_string_t("");
    m_AddressIsSet = false;
    m_MoniesIsSet = false;
}

SDPlayerWalletGetResponse_wallet_inner::~SDPlayerWalletGetResponse_wallet_inner()
{
}

void SDPlayerWalletGetResponse_wallet_inner::validate()
{
    // TODO: implement validation
}

web::json::value SDPlayerWalletGetResponse_wallet_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BlockchainIsSet)
    {
        val[utility::conversions::to_string_t(U("blockchain"))] = ModelBase::toJson(m_Blockchain);
    }
    if(m_AddressIsSet)
    {
        val[utility::conversions::to_string_t(U("address"))] = ModelBase::toJson(m_Address);
    }
    if(m_MoniesIsSet)
    {
        val[utility::conversions::to_string_t(U("monies"))] = ModelBase::toJson(m_Monies);
    }

    return val;
}

bool SDPlayerWalletGetResponse_wallet_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("blockchain"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("blockchain")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlockchain;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockchain);
            setBlockchain(refVal_setBlockchain);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("address")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddress);
            setAddress(refVal_setAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("monies"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("monies")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SDPlayerWalletGetResponse_wallet_inner_monies_inner>> refVal_setMonies;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMonies);
            setMonies(refVal_setMonies);
        }
    }
    return ok;
}

void SDPlayerWalletGetResponse_wallet_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_BlockchainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("blockchain")), m_Blockchain));
    }
    if(m_AddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("address")), m_Address));
    }
    if(m_MoniesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("monies")), m_Monies));
    }
}

bool SDPlayerWalletGetResponse_wallet_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("blockchain"))))
    {
        utility::string_t refVal_setBlockchain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("blockchain"))), refVal_setBlockchain );
        setBlockchain(refVal_setBlockchain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("address"))))
    {
        utility::string_t refVal_setAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("address"))), refVal_setAddress );
        setAddress(refVal_setAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("monies"))))
    {
        std::vector<std::shared_ptr<SDPlayerWalletGetResponse_wallet_inner_monies_inner>> refVal_setMonies;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("monies"))), refVal_setMonies );
        setMonies(refVal_setMonies);
    }
    return ok;
}

utility::string_t SDPlayerWalletGetResponse_wallet_inner::getBlockchain() const
{
    return m_Blockchain;
}

void SDPlayerWalletGetResponse_wallet_inner::setBlockchain(const utility::string_t& value)
{
    m_Blockchain = value;
    m_BlockchainIsSet = true;
}

bool SDPlayerWalletGetResponse_wallet_inner::blockchainIsSet() const
{
    return m_BlockchainIsSet;
}

void SDPlayerWalletGetResponse_wallet_inner::unsetBlockchain()
{
    m_BlockchainIsSet = false;
}
utility::string_t SDPlayerWalletGetResponse_wallet_inner::getAddress() const
{
    return m_Address;
}

void SDPlayerWalletGetResponse_wallet_inner::setAddress(const utility::string_t& value)
{
    m_Address = value;
    m_AddressIsSet = true;
}

bool SDPlayerWalletGetResponse_wallet_inner::addressIsSet() const
{
    return m_AddressIsSet;
}

void SDPlayerWalletGetResponse_wallet_inner::unsetAddress()
{
    m_AddressIsSet = false;
}
std::vector<std::shared_ptr<SDPlayerWalletGetResponse_wallet_inner_monies_inner>>& SDPlayerWalletGetResponse_wallet_inner::getMonies()
{
    return m_Monies;
}

void SDPlayerWalletGetResponse_wallet_inner::setMonies(const std::vector<std::shared_ptr<SDPlayerWalletGetResponse_wallet_inner_monies_inner>>& value)
{
    m_Monies = value;
    m_MoniesIsSet = true;
}

bool SDPlayerWalletGetResponse_wallet_inner::moniesIsSet() const
{
    return m_MoniesIsSet;
}

void SDPlayerWalletGetResponse_wallet_inner::unsetMonies()
{
    m_MoniesIsSet = false;
}
}
}
}
}


