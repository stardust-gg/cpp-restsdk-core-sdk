/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StardustCoreSDK/model/SDPlayerCreateJWTObject.h"

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {



SDPlayerCreateJWTObject::SDPlayerCreateJWTObject()
{
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_IdToken = utility::conversions::to_string_t("");
    m_IdTokenIsSet = false;
    m_AccessToken = utility::conversions::to_string_t("");
    m_AccessTokenIsSet = false;
}

SDPlayerCreateJWTObject::~SDPlayerCreateJWTObject()
{
}

void SDPlayerCreateJWTObject::validate()
{
    // TODO: implement validation
}

web::json::value SDPlayerCreateJWTObject::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_IdTokenIsSet)
    {
        val[utility::conversions::to_string_t(U("idToken"))] = ModelBase::toJson(m_IdToken);
    }
    if(m_AccessTokenIsSet)
    {
        val[utility::conversions::to_string_t(U("accessToken"))] = ModelBase::toJson(m_AccessToken);
    }

    return val;
}

bool SDPlayerCreateJWTObject::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("idToken"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("idToken")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIdToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIdToken);
            setIdToken(refVal_setIdToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accessToken"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accessToken")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccessToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccessToken);
            setAccessToken(refVal_setAccessToken);
        }
    }
    return ok;
}

void SDPlayerCreateJWTObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_IdTokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("idToken")), m_IdToken));
    }
    if(m_AccessTokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accessToken")), m_AccessToken));
    }
}

bool SDPlayerCreateJWTObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("idToken"))))
    {
        utility::string_t refVal_setIdToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("idToken"))), refVal_setIdToken );
        setIdToken(refVal_setIdToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accessToken"))))
    {
        utility::string_t refVal_setAccessToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accessToken"))), refVal_setAccessToken );
        setAccessToken(refVal_setAccessToken);
    }
    return ok;
}

utility::string_t SDPlayerCreateJWTObject::getType() const
{
    return m_Type;
}

void SDPlayerCreateJWTObject::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool SDPlayerCreateJWTObject::typeIsSet() const
{
    return m_TypeIsSet;
}

void SDPlayerCreateJWTObject::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t SDPlayerCreateJWTObject::getIdToken() const
{
    return m_IdToken;
}

void SDPlayerCreateJWTObject::setIdToken(const utility::string_t& value)
{
    m_IdToken = value;
    m_IdTokenIsSet = true;
}

bool SDPlayerCreateJWTObject::idTokenIsSet() const
{
    return m_IdTokenIsSet;
}

void SDPlayerCreateJWTObject::unsetIdToken()
{
    m_IdTokenIsSet = false;
}
utility::string_t SDPlayerCreateJWTObject::getAccessToken() const
{
    return m_AccessToken;
}

void SDPlayerCreateJWTObject::setAccessToken(const utility::string_t& value)
{
    m_AccessToken = value;
    m_AccessTokenIsSet = true;
}

bool SDPlayerCreateJWTObject::accessTokenIsSet() const
{
    return m_AccessTokenIsSet;
}

void SDPlayerCreateJWTObject::unsetAccessToken()
{
    m_AccessTokenIsSet = false;
}
}
}
}
}


