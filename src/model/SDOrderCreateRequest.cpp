/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StardustCoreSDK/model/SDOrderCreateRequest.h"

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {



SDOrderCreateRequest::SDOrderCreateRequest()
{
    m_OfferedBy = utility::conversions::to_string_t("");
    m_OfferedByIsSet = false;
    m_TokensOfferedIsSet = false;
    m_TokensRequestedIsSet = false;
}

SDOrderCreateRequest::~SDOrderCreateRequest()
{
}

void SDOrderCreateRequest::validate()
{
    // TODO: implement validation
}

web::json::value SDOrderCreateRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OfferedByIsSet)
    {
        val[utility::conversions::to_string_t(U("offeredBy"))] = ModelBase::toJson(m_OfferedBy);
    }
    if(m_TokensOfferedIsSet)
    {
        val[utility::conversions::to_string_t(U("tokensOffered"))] = ModelBase::toJson(m_TokensOffered);
    }
    if(m_TokensRequestedIsSet)
    {
        val[utility::conversions::to_string_t(U("tokensRequested"))] = ModelBase::toJson(m_TokensRequested);
    }

    return val;
}

bool SDOrderCreateRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("offeredBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offeredBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOfferedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfferedBy);
            setOfferedBy(refVal_setOfferedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tokensOffered"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tokensOffered")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SDOrderCreateTokens>> refVal_setTokensOffered;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokensOffered);
            setTokensOffered(refVal_setTokensOffered);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tokensRequested"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tokensRequested")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SDOrderCreateTokens>> refVal_setTokensRequested;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokensRequested);
            setTokensRequested(refVal_setTokensRequested);
        }
    }
    return ok;
}

void SDOrderCreateRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_OfferedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offeredBy")), m_OfferedBy));
    }
    if(m_TokensOfferedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tokensOffered")), m_TokensOffered));
    }
    if(m_TokensRequestedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tokensRequested")), m_TokensRequested));
    }
}

bool SDOrderCreateRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("offeredBy"))))
    {
        utility::string_t refVal_setOfferedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offeredBy"))), refVal_setOfferedBy );
        setOfferedBy(refVal_setOfferedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tokensOffered"))))
    {
        std::vector<std::shared_ptr<SDOrderCreateTokens>> refVal_setTokensOffered;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tokensOffered"))), refVal_setTokensOffered );
        setTokensOffered(refVal_setTokensOffered);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tokensRequested"))))
    {
        std::vector<std::shared_ptr<SDOrderCreateTokens>> refVal_setTokensRequested;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tokensRequested"))), refVal_setTokensRequested );
        setTokensRequested(refVal_setTokensRequested);
    }
    return ok;
}

utility::string_t SDOrderCreateRequest::getOfferedBy() const
{
    return m_OfferedBy;
}

void SDOrderCreateRequest::setOfferedBy(const utility::string_t& value)
{
    m_OfferedBy = value;
    m_OfferedByIsSet = true;
}

bool SDOrderCreateRequest::offeredByIsSet() const
{
    return m_OfferedByIsSet;
}

void SDOrderCreateRequest::unsetOfferedBy()
{
    m_OfferedByIsSet = false;
}
std::vector<std::shared_ptr<SDOrderCreateTokens>>& SDOrderCreateRequest::getTokensOffered()
{
    return m_TokensOffered;
}

void SDOrderCreateRequest::setTokensOffered(const std::vector<std::shared_ptr<SDOrderCreateTokens>>& value)
{
    m_TokensOffered = value;
    m_TokensOfferedIsSet = true;
}

bool SDOrderCreateRequest::tokensOfferedIsSet() const
{
    return m_TokensOfferedIsSet;
}

void SDOrderCreateRequest::unsetTokensOffered()
{
    m_TokensOfferedIsSet = false;
}
std::vector<std::shared_ptr<SDOrderCreateTokens>>& SDOrderCreateRequest::getTokensRequested()
{
    return m_TokensRequested;
}

void SDOrderCreateRequest::setTokensRequested(const std::vector<std::shared_ptr<SDOrderCreateTokens>>& value)
{
    m_TokensRequested = value;
    m_TokensRequestedIsSet = true;
}

bool SDOrderCreateRequest::tokensRequestedIsSet() const
{
    return m_TokensRequestedIsSet;
}

void SDOrderCreateRequest::unsetTokensRequested()
{
    m_TokensRequestedIsSet = false;
}
}
}
}
}


