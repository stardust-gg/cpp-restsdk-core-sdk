/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StardustCoreSDK/model/SDPlayerGetInventoryResponse.h"

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {



SDPlayerGetInventoryResponse::SDPlayerGetInventoryResponse()
{
    m_TokenId = 0;
    m_TokenIdIsSet = false;
    m_Amount = utility::conversions::to_string_t("");
    m_AmountIsSet = false;
    m_TemplateId = 0;
    m_TemplateIdIsSet = false;
    m_PropsIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_PublicMetadataIsSet = false;
    m_BlockchainTokenId = utility::conversions::to_string_t("");
    m_BlockchainTokenIdIsSet = false;
    m_BlockchainExplorerLink = utility::conversions::to_string_t("");
    m_BlockchainExplorerLinkIsSet = false;
}

SDPlayerGetInventoryResponse::~SDPlayerGetInventoryResponse()
{
}

void SDPlayerGetInventoryResponse::validate()
{
    // TODO: implement validation
}

web::json::value SDPlayerGetInventoryResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TokenIdIsSet)
    {
        val[utility::conversions::to_string_t(U("tokenId"))] = ModelBase::toJson(m_TokenId);
    }
    if(m_AmountIsSet)
    {
        val[utility::conversions::to_string_t(U("amount"))] = ModelBase::toJson(m_Amount);
    }
    if(m_TemplateIdIsSet)
    {
        val[utility::conversions::to_string_t(U("templateId"))] = ModelBase::toJson(m_TemplateId);
    }
    if(m_PropsIsSet)
    {
        val[utility::conversions::to_string_t(U("props"))] = ModelBase::toJson(m_Props);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_PublicMetadataIsSet)
    {
        val[utility::conversions::to_string_t(U("publicMetadata"))] = ModelBase::toJson(m_PublicMetadata);
    }
    if(m_BlockchainTokenIdIsSet)
    {
        val[utility::conversions::to_string_t(U("blockchainTokenId"))] = ModelBase::toJson(m_BlockchainTokenId);
    }
    if(m_BlockchainExplorerLinkIsSet)
    {
        val[utility::conversions::to_string_t(U("blockchainExplorerLink"))] = ModelBase::toJson(m_BlockchainExplorerLink);
    }

    return val;
}

bool SDPlayerGetInventoryResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("tokenId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tokenId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTokenId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokenId);
            setTokenId(refVal_setTokenId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amount")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAmount);
            setAmount(refVal_setAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("templateId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("templateId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTemplateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplateId);
            setTemplateId(refVal_setTemplateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("props"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("props")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SDPlayerGetInventoryResponse_props> refVal_setProps;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProps);
            setProps(refVal_setProps);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("publicMetadata"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("publicMetadata")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setPublicMetadata;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPublicMetadata);
            setPublicMetadata(refVal_setPublicMetadata);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("blockchainTokenId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("blockchainTokenId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlockchainTokenId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockchainTokenId);
            setBlockchainTokenId(refVal_setBlockchainTokenId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("blockchainExplorerLink"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("blockchainExplorerLink")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlockchainExplorerLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockchainExplorerLink);
            setBlockchainExplorerLink(refVal_setBlockchainExplorerLink);
        }
    }
    return ok;
}

void SDPlayerGetInventoryResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TokenIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tokenId")), m_TokenId));
    }
    if(m_AmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amount")), m_Amount));
    }
    if(m_TemplateIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("templateId")), m_TemplateId));
    }
    if(m_PropsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("props")), m_Props));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_PublicMetadataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("publicMetadata")), m_PublicMetadata));
    }
    if(m_BlockchainTokenIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("blockchainTokenId")), m_BlockchainTokenId));
    }
    if(m_BlockchainExplorerLinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("blockchainExplorerLink")), m_BlockchainExplorerLink));
    }
}

bool SDPlayerGetInventoryResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("tokenId"))))
    {
        int32_t refVal_setTokenId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tokenId"))), refVal_setTokenId );
        setTokenId(refVal_setTokenId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amount"))))
    {
        utility::string_t refVal_setAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amount"))), refVal_setAmount );
        setAmount(refVal_setAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("templateId"))))
    {
        int32_t refVal_setTemplateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("templateId"))), refVal_setTemplateId );
        setTemplateId(refVal_setTemplateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("props"))))
    {
        std::shared_ptr<SDPlayerGetInventoryResponse_props> refVal_setProps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("props"))), refVal_setProps );
        setProps(refVal_setProps);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int32_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("publicMetadata"))))
    {
        std::shared_ptr<Object> refVal_setPublicMetadata;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("publicMetadata"))), refVal_setPublicMetadata );
        setPublicMetadata(refVal_setPublicMetadata);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("blockchainTokenId"))))
    {
        utility::string_t refVal_setBlockchainTokenId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("blockchainTokenId"))), refVal_setBlockchainTokenId );
        setBlockchainTokenId(refVal_setBlockchainTokenId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("blockchainExplorerLink"))))
    {
        utility::string_t refVal_setBlockchainExplorerLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("blockchainExplorerLink"))), refVal_setBlockchainExplorerLink );
        setBlockchainExplorerLink(refVal_setBlockchainExplorerLink);
    }
    return ok;
}

int32_t SDPlayerGetInventoryResponse::getTokenId() const
{
    return m_TokenId;
}

void SDPlayerGetInventoryResponse::setTokenId(int32_t value)
{
    m_TokenId = value;
    m_TokenIdIsSet = true;
}

bool SDPlayerGetInventoryResponse::tokenIdIsSet() const
{
    return m_TokenIdIsSet;
}

void SDPlayerGetInventoryResponse::unsetTokenId()
{
    m_TokenIdIsSet = false;
}
utility::string_t SDPlayerGetInventoryResponse::getAmount() const
{
    return m_Amount;
}

void SDPlayerGetInventoryResponse::setAmount(const utility::string_t& value)
{
    m_Amount = value;
    m_AmountIsSet = true;
}

bool SDPlayerGetInventoryResponse::amountIsSet() const
{
    return m_AmountIsSet;
}

void SDPlayerGetInventoryResponse::unsetAmount()
{
    m_AmountIsSet = false;
}
int32_t SDPlayerGetInventoryResponse::getTemplateId() const
{
    return m_TemplateId;
}

void SDPlayerGetInventoryResponse::setTemplateId(int32_t value)
{
    m_TemplateId = value;
    m_TemplateIdIsSet = true;
}

bool SDPlayerGetInventoryResponse::templateIdIsSet() const
{
    return m_TemplateIdIsSet;
}

void SDPlayerGetInventoryResponse::unsetTemplateId()
{
    m_TemplateIdIsSet = false;
}
std::shared_ptr<SDPlayerGetInventoryResponse_props> SDPlayerGetInventoryResponse::getProps() const
{
    return m_Props;
}

void SDPlayerGetInventoryResponse::setProps(const std::shared_ptr<SDPlayerGetInventoryResponse_props>& value)
{
    m_Props = value;
    m_PropsIsSet = true;
}

bool SDPlayerGetInventoryResponse::propsIsSet() const
{
    return m_PropsIsSet;
}

void SDPlayerGetInventoryResponse::unsetProps()
{
    m_PropsIsSet = false;
}
int32_t SDPlayerGetInventoryResponse::getId() const
{
    return m_Id;
}

void SDPlayerGetInventoryResponse::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SDPlayerGetInventoryResponse::idIsSet() const
{
    return m_IdIsSet;
}

void SDPlayerGetInventoryResponse::unsetId()
{
    m_IdIsSet = false;
}
std::shared_ptr<Object> SDPlayerGetInventoryResponse::getPublicMetadata() const
{
    return m_PublicMetadata;
}

void SDPlayerGetInventoryResponse::setPublicMetadata(const std::shared_ptr<Object>& value)
{
    m_PublicMetadata = value;
    m_PublicMetadataIsSet = true;
}

bool SDPlayerGetInventoryResponse::publicMetadataIsSet() const
{
    return m_PublicMetadataIsSet;
}

void SDPlayerGetInventoryResponse::unsetPublicMetadata()
{
    m_PublicMetadataIsSet = false;
}
utility::string_t SDPlayerGetInventoryResponse::getBlockchainTokenId() const
{
    return m_BlockchainTokenId;
}

void SDPlayerGetInventoryResponse::setBlockchainTokenId(const utility::string_t& value)
{
    m_BlockchainTokenId = value;
    m_BlockchainTokenIdIsSet = true;
}

bool SDPlayerGetInventoryResponse::blockchainTokenIdIsSet() const
{
    return m_BlockchainTokenIdIsSet;
}

void SDPlayerGetInventoryResponse::unsetBlockchainTokenId()
{
    m_BlockchainTokenIdIsSet = false;
}
utility::string_t SDPlayerGetInventoryResponse::getBlockchainExplorerLink() const
{
    return m_BlockchainExplorerLink;
}

void SDPlayerGetInventoryResponse::setBlockchainExplorerLink(const utility::string_t& value)
{
    m_BlockchainExplorerLink = value;
    m_BlockchainExplorerLinkIsSet = true;
}

bool SDPlayerGetInventoryResponse::blockchainExplorerLinkIsSet() const
{
    return m_BlockchainExplorerLinkIsSet;
}

void SDPlayerGetInventoryResponse::unsetBlockchainExplorerLink()
{
    m_BlockchainExplorerLinkIsSet = false;
}
}
}
}
}


