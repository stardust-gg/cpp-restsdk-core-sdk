/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StardustCoreSDK/model/SDOrderCancelRequest.h"

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {



SDOrderCancelRequest::SDOrderCancelRequest()
{
    m_FromPlayerId = utility::conversions::to_string_t("");
    m_FromPlayerIdIsSet = false;
    m_GameId = 0;
    m_GameIdIsSet = false;
    m_OrderId = 0;
    m_OrderIdIsSet = false;
}

SDOrderCancelRequest::~SDOrderCancelRequest()
{
}

void SDOrderCancelRequest::validate()
{
    // TODO: implement validation
}

web::json::value SDOrderCancelRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FromPlayerIdIsSet)
    {
        val[utility::conversions::to_string_t(U("fromPlayerId"))] = ModelBase::toJson(m_FromPlayerId);
    }
    if(m_GameIdIsSet)
    {
        val[utility::conversions::to_string_t(U("gameId"))] = ModelBase::toJson(m_GameId);
    }
    if(m_OrderIdIsSet)
    {
        val[utility::conversions::to_string_t(U("orderId"))] = ModelBase::toJson(m_OrderId);
    }

    return val;
}

bool SDOrderCancelRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("fromPlayerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fromPlayerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFromPlayerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFromPlayerId);
            setFromPlayerId(refVal_setFromPlayerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gameId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gameId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setGameId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGameId);
            setGameId(refVal_setGameId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("orderId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("orderId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setOrderId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrderId);
            setOrderId(refVal_setOrderId);
        }
    }
    return ok;
}

void SDOrderCancelRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FromPlayerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fromPlayerId")), m_FromPlayerId));
    }
    if(m_GameIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gameId")), m_GameId));
    }
    if(m_OrderIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("orderId")), m_OrderId));
    }
}

bool SDOrderCancelRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("fromPlayerId"))))
    {
        utility::string_t refVal_setFromPlayerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fromPlayerId"))), refVal_setFromPlayerId );
        setFromPlayerId(refVal_setFromPlayerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gameId"))))
    {
        int32_t refVal_setGameId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gameId"))), refVal_setGameId );
        setGameId(refVal_setGameId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("orderId"))))
    {
        int32_t refVal_setOrderId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("orderId"))), refVal_setOrderId );
        setOrderId(refVal_setOrderId);
    }
    return ok;
}

utility::string_t SDOrderCancelRequest::getFromPlayerId() const
{
    return m_FromPlayerId;
}

void SDOrderCancelRequest::setFromPlayerId(const utility::string_t& value)
{
    m_FromPlayerId = value;
    m_FromPlayerIdIsSet = true;
}

bool SDOrderCancelRequest::fromPlayerIdIsSet() const
{
    return m_FromPlayerIdIsSet;
}

void SDOrderCancelRequest::unsetFromPlayerId()
{
    m_FromPlayerIdIsSet = false;
}
int32_t SDOrderCancelRequest::getGameId() const
{
    return m_GameId;
}

void SDOrderCancelRequest::setGameId(int32_t value)
{
    m_GameId = value;
    m_GameIdIsSet = true;
}

bool SDOrderCancelRequest::gameIdIsSet() const
{
    return m_GameIdIsSet;
}

void SDOrderCancelRequest::unsetGameId()
{
    m_GameIdIsSet = false;
}
int32_t SDOrderCancelRequest::getOrderId() const
{
    return m_OrderId;
}

void SDOrderCancelRequest::setOrderId(int32_t value)
{
    m_OrderId = value;
    m_OrderIdIsSet = true;
}

bool SDOrderCancelRequest::orderIdIsSet() const
{
    return m_OrderIdIsSet;
}

void SDOrderCancelRequest::unsetOrderId()
{
    m_OrderIdIsSet = false;
}
}
}
}
}


