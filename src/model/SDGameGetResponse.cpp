/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StardustCoreSDK/model/SDGameGetResponse.h"

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {



SDGameGetResponse::SDGameGetResponse()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_OwnerId = utility::conversions::to_string_t("");
    m_OwnerIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Desc = utility::conversions::to_string_t("");
    m_DescIsSet = false;
    m_Image = utility::conversions::to_string_t("");
    m_ImageIsSet = false;
    m_BucketName = utility::conversions::to_string_t("");
    m_BucketNameIsSet = false;
    m_News = utility::conversions::to_string_t("");
    m_NewsIsSet = false;
    m_FeesIsSet = false;
    m_PropsIsSet = false;
    m_TestMode = false;
    m_TestModeIsSet = false;
}

SDGameGetResponse::~SDGameGetResponse()
{
}

void SDGameGetResponse::validate()
{
    // TODO: implement validation
}

web::json::value SDGameGetResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_OwnerIdIsSet)
    {
        val[utility::conversions::to_string_t(U("ownerId"))] = ModelBase::toJson(m_OwnerId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_DescIsSet)
    {
        val[utility::conversions::to_string_t(U("desc"))] = ModelBase::toJson(m_Desc);
    }
    if(m_ImageIsSet)
    {
        val[utility::conversions::to_string_t(U("image"))] = ModelBase::toJson(m_Image);
    }
    if(m_BucketNameIsSet)
    {
        val[utility::conversions::to_string_t(U("bucketName"))] = ModelBase::toJson(m_BucketName);
    }
    if(m_NewsIsSet)
    {
        val[utility::conversions::to_string_t(U("news"))] = ModelBase::toJson(m_News);
    }
    if(m_FeesIsSet)
    {
        val[utility::conversions::to_string_t(U("fees"))] = ModelBase::toJson(m_Fees);
    }
    if(m_PropsIsSet)
    {
        val[utility::conversions::to_string_t(U("props"))] = ModelBase::toJson(m_Props);
    }
    if(m_TestModeIsSet)
    {
        val[utility::conversions::to_string_t(U("testMode"))] = ModelBase::toJson(m_TestMode);
    }

    return val;
}

bool SDGameGetResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ownerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ownerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOwnerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOwnerId);
            setOwnerId(refVal_setOwnerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("desc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("desc")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDesc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDesc);
            setDesc(refVal_setDesc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("image"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("image")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImage);
            setImage(refVal_setImage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bucketName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bucketName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBucketName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBucketName);
            setBucketName(refVal_setBucketName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("news"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("news")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNews;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNews);
            setNews(refVal_setNews);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fees"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fees")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SDGameGetResponse_fees_inner>> refVal_setFees;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFees);
            setFees(refVal_setFees);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("props"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("props")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setProps;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProps);
            setProps(refVal_setProps);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("testMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("testMode")));
        if(!fieldValue.is_null())
        {
            bool refVal_setTestMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTestMode);
            setTestMode(refVal_setTestMode);
        }
    }
    return ok;
}

void SDGameGetResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_OwnerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ownerId")), m_OwnerId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_DescIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("desc")), m_Desc));
    }
    if(m_ImageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("image")), m_Image));
    }
    if(m_BucketNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bucketName")), m_BucketName));
    }
    if(m_NewsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("news")), m_News));
    }
    if(m_FeesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fees")), m_Fees));
    }
    if(m_PropsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("props")), m_Props));
    }
    if(m_TestModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("testMode")), m_TestMode));
    }
}

bool SDGameGetResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int32_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ownerId"))))
    {
        utility::string_t refVal_setOwnerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ownerId"))), refVal_setOwnerId );
        setOwnerId(refVal_setOwnerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("desc"))))
    {
        utility::string_t refVal_setDesc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("desc"))), refVal_setDesc );
        setDesc(refVal_setDesc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("image"))))
    {
        utility::string_t refVal_setImage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("image"))), refVal_setImage );
        setImage(refVal_setImage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bucketName"))))
    {
        utility::string_t refVal_setBucketName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bucketName"))), refVal_setBucketName );
        setBucketName(refVal_setBucketName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("news"))))
    {
        utility::string_t refVal_setNews;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("news"))), refVal_setNews );
        setNews(refVal_setNews);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fees"))))
    {
        std::vector<std::shared_ptr<SDGameGetResponse_fees_inner>> refVal_setFees;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fees"))), refVal_setFees );
        setFees(refVal_setFees);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("props"))))
    {
        std::shared_ptr<Object> refVal_setProps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("props"))), refVal_setProps );
        setProps(refVal_setProps);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("testMode"))))
    {
        bool refVal_setTestMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("testMode"))), refVal_setTestMode );
        setTestMode(refVal_setTestMode);
    }
    return ok;
}

int32_t SDGameGetResponse::getId() const
{
    return m_Id;
}

void SDGameGetResponse::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SDGameGetResponse::idIsSet() const
{
    return m_IdIsSet;
}

void SDGameGetResponse::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t SDGameGetResponse::getOwnerId() const
{
    return m_OwnerId;
}

void SDGameGetResponse::setOwnerId(const utility::string_t& value)
{
    m_OwnerId = value;
    m_OwnerIdIsSet = true;
}

bool SDGameGetResponse::ownerIdIsSet() const
{
    return m_OwnerIdIsSet;
}

void SDGameGetResponse::unsetOwnerId()
{
    m_OwnerIdIsSet = false;
}
utility::string_t SDGameGetResponse::getName() const
{
    return m_Name;
}

void SDGameGetResponse::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool SDGameGetResponse::nameIsSet() const
{
    return m_NameIsSet;
}

void SDGameGetResponse::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t SDGameGetResponse::getDesc() const
{
    return m_Desc;
}

void SDGameGetResponse::setDesc(const utility::string_t& value)
{
    m_Desc = value;
    m_DescIsSet = true;
}

bool SDGameGetResponse::descIsSet() const
{
    return m_DescIsSet;
}

void SDGameGetResponse::unsetDesc()
{
    m_DescIsSet = false;
}
utility::string_t SDGameGetResponse::getImage() const
{
    return m_Image;
}

void SDGameGetResponse::setImage(const utility::string_t& value)
{
    m_Image = value;
    m_ImageIsSet = true;
}

bool SDGameGetResponse::imageIsSet() const
{
    return m_ImageIsSet;
}

void SDGameGetResponse::unsetImage()
{
    m_ImageIsSet = false;
}
utility::string_t SDGameGetResponse::getBucketName() const
{
    return m_BucketName;
}

void SDGameGetResponse::setBucketName(const utility::string_t& value)
{
    m_BucketName = value;
    m_BucketNameIsSet = true;
}

bool SDGameGetResponse::bucketNameIsSet() const
{
    return m_BucketNameIsSet;
}

void SDGameGetResponse::unsetBucketName()
{
    m_BucketNameIsSet = false;
}
utility::string_t SDGameGetResponse::getNews() const
{
    return m_News;
}

void SDGameGetResponse::setNews(const utility::string_t& value)
{
    m_News = value;
    m_NewsIsSet = true;
}

bool SDGameGetResponse::newsIsSet() const
{
    return m_NewsIsSet;
}

void SDGameGetResponse::unsetNews()
{
    m_NewsIsSet = false;
}
std::vector<std::shared_ptr<SDGameGetResponse_fees_inner>>& SDGameGetResponse::getFees()
{
    return m_Fees;
}

void SDGameGetResponse::setFees(const std::vector<std::shared_ptr<SDGameGetResponse_fees_inner>>& value)
{
    m_Fees = value;
    m_FeesIsSet = true;
}

bool SDGameGetResponse::feesIsSet() const
{
    return m_FeesIsSet;
}

void SDGameGetResponse::unsetFees()
{
    m_FeesIsSet = false;
}
std::shared_ptr<Object> SDGameGetResponse::getProps() const
{
    return m_Props;
}

void SDGameGetResponse::setProps(const std::shared_ptr<Object>& value)
{
    m_Props = value;
    m_PropsIsSet = true;
}

bool SDGameGetResponse::propsIsSet() const
{
    return m_PropsIsSet;
}

void SDGameGetResponse::unsetProps()
{
    m_PropsIsSet = false;
}
bool SDGameGetResponse::isTestMode() const
{
    return m_TestMode;
}

void SDGameGetResponse::setTestMode(bool value)
{
    m_TestMode = value;
    m_TestModeIsSet = true;
}

bool SDGameGetResponse::testModeIsSet() const
{
    return m_TestModeIsSet;
}

void SDGameGetResponse::unsetTestMode()
{
    m_TestModeIsSet = false;
}
}
}
}
}


