/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StardustCoreSDK/model/SDTokenMintBulkTokenObject.h"

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {



SDTokenMintBulkTokenObject::SDTokenMintBulkTokenObject()
{
    m_TemplateId = 0;
    m_TemplateIdIsSet = false;
    m_Amount = utility::conversions::to_string_t("");
    m_AmountIsSet = false;
    m_PropsIsSet = false;
    m_PublicMetadataIsSet = false;
}

SDTokenMintBulkTokenObject::~SDTokenMintBulkTokenObject()
{
}

void SDTokenMintBulkTokenObject::validate()
{
    // TODO: implement validation
}

web::json::value SDTokenMintBulkTokenObject::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TemplateIdIsSet)
    {
        val[utility::conversions::to_string_t(U("templateId"))] = ModelBase::toJson(m_TemplateId);
    }
    if(m_AmountIsSet)
    {
        val[utility::conversions::to_string_t(U("amount"))] = ModelBase::toJson(m_Amount);
    }
    if(m_PropsIsSet)
    {
        val[utility::conversions::to_string_t(U("props"))] = ModelBase::toJson(m_Props);
    }
    if(m_PublicMetadataIsSet)
    {
        val[utility::conversions::to_string_t(U("publicMetadata"))] = ModelBase::toJson(m_PublicMetadata);
    }

    return val;
}

bool SDTokenMintBulkTokenObject::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("templateId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("templateId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTemplateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplateId);
            setTemplateId(refVal_setTemplateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amount")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAmount);
            setAmount(refVal_setAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("props"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("props")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SDTokenMintBulkTokenObject_props> refVal_setProps;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProps);
            setProps(refVal_setProps);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("publicMetadata"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("publicMetadata")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setPublicMetadata;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPublicMetadata);
            setPublicMetadata(refVal_setPublicMetadata);
        }
    }
    return ok;
}

void SDTokenMintBulkTokenObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TemplateIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("templateId")), m_TemplateId));
    }
    if(m_AmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amount")), m_Amount));
    }
    if(m_PropsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("props")), m_Props));
    }
    if(m_PublicMetadataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("publicMetadata")), m_PublicMetadata));
    }
}

bool SDTokenMintBulkTokenObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("templateId"))))
    {
        int32_t refVal_setTemplateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("templateId"))), refVal_setTemplateId );
        setTemplateId(refVal_setTemplateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amount"))))
    {
        utility::string_t refVal_setAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amount"))), refVal_setAmount );
        setAmount(refVal_setAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("props"))))
    {
        std::shared_ptr<SDTokenMintBulkTokenObject_props> refVal_setProps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("props"))), refVal_setProps );
        setProps(refVal_setProps);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("publicMetadata"))))
    {
        std::shared_ptr<Object> refVal_setPublicMetadata;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("publicMetadata"))), refVal_setPublicMetadata );
        setPublicMetadata(refVal_setPublicMetadata);
    }
    return ok;
}

int32_t SDTokenMintBulkTokenObject::getTemplateId() const
{
    return m_TemplateId;
}

void SDTokenMintBulkTokenObject::setTemplateId(int32_t value)
{
    m_TemplateId = value;
    m_TemplateIdIsSet = true;
}

bool SDTokenMintBulkTokenObject::templateIdIsSet() const
{
    return m_TemplateIdIsSet;
}

void SDTokenMintBulkTokenObject::unsetTemplateId()
{
    m_TemplateIdIsSet = false;
}
utility::string_t SDTokenMintBulkTokenObject::getAmount() const
{
    return m_Amount;
}

void SDTokenMintBulkTokenObject::setAmount(const utility::string_t& value)
{
    m_Amount = value;
    m_AmountIsSet = true;
}

bool SDTokenMintBulkTokenObject::amountIsSet() const
{
    return m_AmountIsSet;
}

void SDTokenMintBulkTokenObject::unsetAmount()
{
    m_AmountIsSet = false;
}
std::shared_ptr<SDTokenMintBulkTokenObject_props> SDTokenMintBulkTokenObject::getProps() const
{
    return m_Props;
}

void SDTokenMintBulkTokenObject::setProps(const std::shared_ptr<SDTokenMintBulkTokenObject_props>& value)
{
    m_Props = value;
    m_PropsIsSet = true;
}

bool SDTokenMintBulkTokenObject::propsIsSet() const
{
    return m_PropsIsSet;
}

void SDTokenMintBulkTokenObject::unsetProps()
{
    m_PropsIsSet = false;
}
std::shared_ptr<Object> SDTokenMintBulkTokenObject::getPublicMetadata() const
{
    return m_PublicMetadata;
}

void SDTokenMintBulkTokenObject::setPublicMetadata(const std::shared_ptr<Object>& value)
{
    m_PublicMetadata = value;
    m_PublicMetadataIsSet = true;
}

bool SDTokenMintBulkTokenObject::publicMetadataIsSet() const
{
    return m_PublicMetadataIsSet;
}

void SDTokenMintBulkTokenObject::unsetPublicMetadata()
{
    m_PublicMetadataIsSet = false;
}
}
}
}
}


