/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StardustCoreSDK/model/SDTokenTransferRequest.h"

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {



SDTokenTransferRequest::SDTokenTransferRequest()
{
    m_FromPlayerId = utility::conversions::to_string_t("");
    m_FromPlayerIdIsSet = false;
    m_ToPlayerId = utility::conversions::to_string_t("");
    m_ToPlayerIdIsSet = false;
    m_TokenObjectsIsSet = false;
}

SDTokenTransferRequest::~SDTokenTransferRequest()
{
}

void SDTokenTransferRequest::validate()
{
    // TODO: implement validation
}

web::json::value SDTokenTransferRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FromPlayerIdIsSet)
    {
        val[utility::conversions::to_string_t(U("fromPlayerId"))] = ModelBase::toJson(m_FromPlayerId);
    }
    if(m_ToPlayerIdIsSet)
    {
        val[utility::conversions::to_string_t(U("toPlayerId"))] = ModelBase::toJson(m_ToPlayerId);
    }
    if(m_TokenObjectsIsSet)
    {
        val[utility::conversions::to_string_t(U("tokenObjects"))] = ModelBase::toJson(m_TokenObjects);
    }

    return val;
}

bool SDTokenTransferRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("fromPlayerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fromPlayerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFromPlayerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFromPlayerId);
            setFromPlayerId(refVal_setFromPlayerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("toPlayerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("toPlayerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setToPlayerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setToPlayerId);
            setToPlayerId(refVal_setToPlayerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tokenObjects"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tokenObjects")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SDTokenBurnRequest_tokenObjects_inner>> refVal_setTokenObjects;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokenObjects);
            setTokenObjects(refVal_setTokenObjects);
        }
    }
    return ok;
}

void SDTokenTransferRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FromPlayerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fromPlayerId")), m_FromPlayerId));
    }
    if(m_ToPlayerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("toPlayerId")), m_ToPlayerId));
    }
    if(m_TokenObjectsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tokenObjects")), m_TokenObjects));
    }
}

bool SDTokenTransferRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("fromPlayerId"))))
    {
        utility::string_t refVal_setFromPlayerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fromPlayerId"))), refVal_setFromPlayerId );
        setFromPlayerId(refVal_setFromPlayerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("toPlayerId"))))
    {
        utility::string_t refVal_setToPlayerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("toPlayerId"))), refVal_setToPlayerId );
        setToPlayerId(refVal_setToPlayerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tokenObjects"))))
    {
        std::vector<std::shared_ptr<SDTokenBurnRequest_tokenObjects_inner>> refVal_setTokenObjects;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tokenObjects"))), refVal_setTokenObjects );
        setTokenObjects(refVal_setTokenObjects);
    }
    return ok;
}

utility::string_t SDTokenTransferRequest::getFromPlayerId() const
{
    return m_FromPlayerId;
}

void SDTokenTransferRequest::setFromPlayerId(const utility::string_t& value)
{
    m_FromPlayerId = value;
    m_FromPlayerIdIsSet = true;
}

bool SDTokenTransferRequest::fromPlayerIdIsSet() const
{
    return m_FromPlayerIdIsSet;
}

void SDTokenTransferRequest::unsetFromPlayerId()
{
    m_FromPlayerIdIsSet = false;
}
utility::string_t SDTokenTransferRequest::getToPlayerId() const
{
    return m_ToPlayerId;
}

void SDTokenTransferRequest::setToPlayerId(const utility::string_t& value)
{
    m_ToPlayerId = value;
    m_ToPlayerIdIsSet = true;
}

bool SDTokenTransferRequest::toPlayerIdIsSet() const
{
    return m_ToPlayerIdIsSet;
}

void SDTokenTransferRequest::unsetToPlayerId()
{
    m_ToPlayerIdIsSet = false;
}
std::vector<std::shared_ptr<SDTokenBurnRequest_tokenObjects_inner>>& SDTokenTransferRequest::getTokenObjects()
{
    return m_TokenObjects;
}

void SDTokenTransferRequest::setTokenObjects(const std::vector<std::shared_ptr<SDTokenBurnRequest_tokenObjects_inner>>& value)
{
    m_TokenObjects = value;
    m_TokenObjectsIsSet = true;
}

bool SDTokenTransferRequest::tokenObjectsIsSet() const
{
    return m_TokenObjectsIsSet;
}

void SDTokenTransferRequest::unsetTokenObjects()
{
    m_TokenObjectsIsSet = false;
}
}
}
}
}


