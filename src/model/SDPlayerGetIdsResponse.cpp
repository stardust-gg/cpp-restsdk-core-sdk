/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StardustCoreSDK/model/SDPlayerGetIdsResponse.h"

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {



SDPlayerGetIdsResponse::SDPlayerGetIdsResponse()
{
    m_PlayerId = utility::conversions::to_string_t("");
    m_PlayerIdIsSet = false;
    m_UniqueId = utility::conversions::to_string_t("");
    m_UniqueIdIsSet = false;
}

SDPlayerGetIdsResponse::~SDPlayerGetIdsResponse()
{
}

void SDPlayerGetIdsResponse::validate()
{
    // TODO: implement validation
}

web::json::value SDPlayerGetIdsResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PlayerIdIsSet)
    {
        val[utility::conversions::to_string_t(U("playerId"))] = ModelBase::toJson(m_PlayerId);
    }
    if(m_UniqueIdIsSet)
    {
        val[utility::conversions::to_string_t(U("uniqueId"))] = ModelBase::toJson(m_UniqueId);
    }

    return val;
}

bool SDPlayerGetIdsResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("playerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("playerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPlayerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlayerId);
            setPlayerId(refVal_setPlayerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uniqueId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uniqueId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUniqueId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUniqueId);
            setUniqueId(refVal_setUniqueId);
        }
    }
    return ok;
}

void SDPlayerGetIdsResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PlayerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("playerId")), m_PlayerId));
    }
    if(m_UniqueIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uniqueId")), m_UniqueId));
    }
}

bool SDPlayerGetIdsResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("playerId"))))
    {
        utility::string_t refVal_setPlayerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("playerId"))), refVal_setPlayerId );
        setPlayerId(refVal_setPlayerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uniqueId"))))
    {
        utility::string_t refVal_setUniqueId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uniqueId"))), refVal_setUniqueId );
        setUniqueId(refVal_setUniqueId);
    }
    return ok;
}

utility::string_t SDPlayerGetIdsResponse::getPlayerId() const
{
    return m_PlayerId;
}

void SDPlayerGetIdsResponse::setPlayerId(const utility::string_t& value)
{
    m_PlayerId = value;
    m_PlayerIdIsSet = true;
}

bool SDPlayerGetIdsResponse::playerIdIsSet() const
{
    return m_PlayerIdIsSet;
}

void SDPlayerGetIdsResponse::unsetPlayerId()
{
    m_PlayerIdIsSet = false;
}
utility::string_t SDPlayerGetIdsResponse::getUniqueId() const
{
    return m_UniqueId;
}

void SDPlayerGetIdsResponse::setUniqueId(const utility::string_t& value)
{
    m_UniqueId = value;
    m_UniqueIdIsSet = true;
}

bool SDPlayerGetIdsResponse::uniqueIdIsSet() const
{
    return m_UniqueIdIsSet;
}

void SDPlayerGetIdsResponse::unsetUniqueId()
{
    m_UniqueIdIsSet = false;
}
}
}
}
}


