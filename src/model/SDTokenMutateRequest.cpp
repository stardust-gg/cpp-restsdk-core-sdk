/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-06-15T19:52:41Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StardustCoreSDK/model/SDTokenMutateRequest.h"

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {



SDTokenMutateRequest::SDTokenMutateRequest()
{
    m_TokenId = 0;
    m_TokenIdIsSet = false;
    m_PropsIsSet = false;
    m_PublicMetadataIsSet = false;
}

SDTokenMutateRequest::~SDTokenMutateRequest()
{
}

void SDTokenMutateRequest::validate()
{
    // TODO: implement validation
}

web::json::value SDTokenMutateRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TokenIdIsSet)
    {
        val[utility::conversions::to_string_t(U("tokenId"))] = ModelBase::toJson(m_TokenId);
    }
    if(m_PropsIsSet)
    {
        val[utility::conversions::to_string_t(U("props"))] = ModelBase::toJson(m_Props);
    }
    if(m_PublicMetadataIsSet)
    {
        val[utility::conversions::to_string_t(U("publicMetadata"))] = ModelBase::toJson(m_PublicMetadata);
    }

    return val;
}

bool SDTokenMutateRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("tokenId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tokenId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTokenId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokenId);
            setTokenId(refVal_setTokenId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("props"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("props")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setProps;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProps);
            setProps(refVal_setProps);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("publicMetadata"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("publicMetadata")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setPublicMetadata;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPublicMetadata);
            setPublicMetadata(refVal_setPublicMetadata);
        }
    }
    return ok;
}

void SDTokenMutateRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TokenIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tokenId")), m_TokenId));
    }
    if(m_PropsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("props")), m_Props));
    }
    if(m_PublicMetadataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("publicMetadata")), m_PublicMetadata));
    }
}

bool SDTokenMutateRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("tokenId"))))
    {
        int32_t refVal_setTokenId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tokenId"))), refVal_setTokenId );
        setTokenId(refVal_setTokenId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("props"))))
    {
        std::shared_ptr<Object> refVal_setProps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("props"))), refVal_setProps );
        setProps(refVal_setProps);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("publicMetadata"))))
    {
        std::shared_ptr<Object> refVal_setPublicMetadata;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("publicMetadata"))), refVal_setPublicMetadata );
        setPublicMetadata(refVal_setPublicMetadata);
    }
    return ok;
}

int32_t SDTokenMutateRequest::getTokenId() const
{
    return m_TokenId;
}

void SDTokenMutateRequest::setTokenId(int32_t value)
{
    m_TokenId = value;
    m_TokenIdIsSet = true;
}

bool SDTokenMutateRequest::tokenIdIsSet() const
{
    return m_TokenIdIsSet;
}

void SDTokenMutateRequest::unsetTokenId()
{
    m_TokenIdIsSet = false;
}
std::shared_ptr<Object> SDTokenMutateRequest::getProps() const
{
    return m_Props;
}

void SDTokenMutateRequest::setProps(const std::shared_ptr<Object>& value)
{
    m_Props = value;
    m_PropsIsSet = true;
}

bool SDTokenMutateRequest::propsIsSet() const
{
    return m_PropsIsSet;
}

void SDTokenMutateRequest::unsetProps()
{
    m_PropsIsSet = false;
}
std::shared_ptr<Object> SDTokenMutateRequest::getPublicMetadata() const
{
    return m_PublicMetadata;
}

void SDTokenMutateRequest::setPublicMetadata(const std::shared_ptr<Object>& value)
{
    m_PublicMetadata = value;
    m_PublicMetadataIsSet = true;
}

bool SDTokenMutateRequest::publicMetadataIsSet() const
{
    return m_PublicMetadataIsSet;
}

void SDTokenMutateRequest::unsetPublicMetadata()
{
    m_PublicMetadataIsSet = false;
}
}
}
}
}


