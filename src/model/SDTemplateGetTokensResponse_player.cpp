/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.5.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StardustCoreSDK/model/SDTemplateGetTokensResponse_player.h"

namespace gg {
namespace stardust {
namespace coresdk {
namespace model {



SDTemplateGetTokensResponse_player::SDTemplateGetTokensResponse_player()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UniqueId = utility::conversions::to_string_t("");
    m_UniqueIdIsSet = false;
    m_Image = utility::conversions::to_string_t("");
    m_ImageIsSet = false;
    m_DeletedAt = utility::conversions::to_string_t("");
    m_DeletedAtIsSet = false;
}

SDTemplateGetTokensResponse_player::~SDTemplateGetTokensResponse_player()
{
}

void SDTemplateGetTokensResponse_player::validate()
{
    // TODO: implement validation
}

web::json::value SDTemplateGetTokensResponse_player::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_UniqueIdIsSet)
    {
        val[utility::conversions::to_string_t(U("uniqueId"))] = ModelBase::toJson(m_UniqueId);
    }
    if(m_ImageIsSet)
    {
        val[utility::conversions::to_string_t(U("image"))] = ModelBase::toJson(m_Image);
    }
    if(m_DeletedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("deletedAt"))] = ModelBase::toJson(m_DeletedAt);
    }

    return val;
}

bool SDTemplateGetTokensResponse_player::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uniqueId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uniqueId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUniqueId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUniqueId);
            setUniqueId(refVal_setUniqueId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("image"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("image")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImage);
            setImage(refVal_setImage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deletedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deletedAt")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDeletedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeletedAt);
            setDeletedAt(refVal_setDeletedAt);
        }
    }
    return ok;
}

void SDTemplateGetTokensResponse_player::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_UniqueIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uniqueId")), m_UniqueId));
    }
    if(m_ImageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("image")), m_Image));
    }
    if(m_DeletedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deletedAt")), m_DeletedAt));
    }
}

bool SDTemplateGetTokensResponse_player::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uniqueId"))))
    {
        utility::string_t refVal_setUniqueId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uniqueId"))), refVal_setUniqueId );
        setUniqueId(refVal_setUniqueId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("image"))))
    {
        utility::string_t refVal_setImage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("image"))), refVal_setImage );
        setImage(refVal_setImage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deletedAt"))))
    {
        utility::string_t refVal_setDeletedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deletedAt"))), refVal_setDeletedAt );
        setDeletedAt(refVal_setDeletedAt);
    }
    return ok;
}

utility::string_t SDTemplateGetTokensResponse_player::getId() const
{
    return m_Id;
}

void SDTemplateGetTokensResponse_player::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SDTemplateGetTokensResponse_player::idIsSet() const
{
    return m_IdIsSet;
}

void SDTemplateGetTokensResponse_player::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t SDTemplateGetTokensResponse_player::getUniqueId() const
{
    return m_UniqueId;
}

void SDTemplateGetTokensResponse_player::setUniqueId(const utility::string_t& value)
{
    m_UniqueId = value;
    m_UniqueIdIsSet = true;
}

bool SDTemplateGetTokensResponse_player::uniqueIdIsSet() const
{
    return m_UniqueIdIsSet;
}

void SDTemplateGetTokensResponse_player::unsetUniqueId()
{
    m_UniqueIdIsSet = false;
}
utility::string_t SDTemplateGetTokensResponse_player::getImage() const
{
    return m_Image;
}

void SDTemplateGetTokensResponse_player::setImage(const utility::string_t& value)
{
    m_Image = value;
    m_ImageIsSet = true;
}

bool SDTemplateGetTokensResponse_player::imageIsSet() const
{
    return m_ImageIsSet;
}

void SDTemplateGetTokensResponse_player::unsetImage()
{
    m_ImageIsSet = false;
}
utility::string_t SDTemplateGetTokensResponse_player::getDeletedAt() const
{
    return m_DeletedAt;
}

void SDTemplateGetTokensResponse_player::setDeletedAt(const utility::string_t& value)
{
    m_DeletedAt = value;
    m_DeletedAtIsSet = true;
}

bool SDTemplateGetTokensResponse_player::deletedAtIsSet() const
{
    return m_DeletedAtIsSet;
}

void SDTemplateGetTokensResponse_player::unsetDeletedAt()
{
    m_DeletedAtIsSet = false;
}
}
}
}
}


